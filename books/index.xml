<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Books on krapjost</title>
    <link>https://krapjost.github.io/books/</link>
    <description>Recent content in Books on krapjost</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://krapjost.github.io/books/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/doit-node.js-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A0%95%EC%9E%AC%EA%B3%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/doit-node.js-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A0%95%EC%9E%AC%EA%B3%A4/</guid>
      <description>Doit! Node.js 프로그래밍 (정재곤) 목차 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/doit-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A0%84%EC%98%88%ED%99%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/doit-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A0%84%EC%98%88%ED%99%8D/</guid>
      <description>Doit! 타입스크립트 프로그래밍 (전예홍) 목차 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/ecmascript6-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0-%EB%82%98%EB%9D%BC%EC%96%80-%ED%94%84%EB%A3%A8%EC%8A%A4%ED%8B%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/ecmascript6-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0-%EB%82%98%EB%9D%BC%EC%96%80-%ED%94%84%EB%A3%A8%EC%8A%A4%ED%8B%B0/</guid>
      <description>ECMAScript6 길들이기 (나라얀 프루스티) 목차  ecma  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/3%EC%9E%A5-%EB%B9%85-%EC%98%A4-%ED%91%9C%EA%B8%B0%EB%B2%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/3%EC%9E%A5-%EB%B9%85-%EC%98%A4-%ED%91%9C%EA%B8%B0%EB%B2%95/</guid>
      <description>[TOC]
3장. 빅 오 표기법 알고리즘의 효율성은 수행에 걸리는 단계수로 측정한다.
빅오 표기법이란 그 단계수를 간결하고 이해하기 쉽게 표기하기 위한 방법이다.
O(N) 원소가 10개인 배열을 다룰 때 완료까지 10번이 걸리는 선형 알고리즘이 있다.
const arr = [1,2,3,4,5,6,7,8,9,10] function loop(arr) { for (let i = 0, len = arr.length; i &amp;lt; len; i++) { // do something 	} } 이때 원소 갯수에 따라 수행에 필요한 단계 수도 일정하게 변한다.
단계 수를 N으로 표기하고 그 복잡함의 크기를 O라고 표기하자.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/4%EC%9E%A5.-%EB%B9%85-%EC%98%A4%EB%A1%9C-%EC%BD%94%EB%93%9C-%EC%86%8D%EB%8F%84-%EC%98%AC%EB%A6%AC%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/4%EC%9E%A5.-%EB%B9%85-%EC%98%A4%EB%A1%9C-%EC%BD%94%EB%93%9C-%EC%86%8D%EB%8F%84-%EC%98%AC%EB%A6%AC%EA%B8%B0/</guid>
      <description>빅 오로 코드 속도 올리기 버블 정렬 각 정렬 알고리즘 비교 애니메이션 bubble ( 버블 정렬 ) O(n2)
두 인접한 원소를 검사하여 정렬하는 방법
 def bubbleSort(x): length = len(x)-1 for i in range(length): for j in range(length-i): if x[j] &amp;gt; x[j+1]: x[j], x[j+1] = x[j+1], x[j] return x selection ( 선택 정렬 ) O(n2)
 주어진 리스트 중에 최소값을 찾는다. 그 값을 맨 앞에 위치한 값과 교체한다(패스(pass)). 맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/5%EC%9E%A5.-%EB%B9%85-%EC%98%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B1%B0%EB%82%98-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%BD%94%EB%93%9C-%EC%B5%9C%EC%A0%81%ED%99%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/5%EC%9E%A5.-%EB%B9%85-%EC%98%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B1%B0%EB%82%98-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%BD%94%EB%93%9C-%EC%B5%9C%EC%A0%81%ED%99%94/</guid>
      <description>5장. 빅 오를 사용하거나 사용하지 않는 코드 최적화 빅 오 표기법상 같다고 성능이 다 같은 것이 아니다. 선택정렬과 버블정렬     선택 정렬 버블 정렬     빅 오 표기 O(n2) O(n2)   애니메이션     N개의 원소 최대 단계 수 최대 단계 수   5 14 20   10 54 90   20 199 380   40 819 1560   80 3239 6320    선택정렬이 2배 가량 더 빠르지만 빅 오 표기법상 같은 방식으로 설명한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/6%EC%9E%A5.-%EA%B8%8D%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EC%B5%9C%EC%A0%81%ED%99%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/6%EC%9E%A5.-%EA%B8%8D%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EC%B5%9C%EC%A0%81%ED%99%94/</guid>
      <description>6장. 긍정적인 시나리오 최적화 최악의 시나리오에서의 효율성과 평균 시나리오에서의 효율성
최악을 우선으로 최적화하고 그 다음 다른 상황을 최적화하자.
삽입 정렬 def insert_sort(x): for i in range(1, len(x)): j = i - 1 key = x[i] while x[j] &amp;gt; key and j &amp;gt;= 0: x[j+1] = x[j] j = j - 1 x[j+1] = key return x     삽입 정렬 선택 정렬     최악의 경우 N2+ 2N -2 N2/ 2   평균적인 경우 N2/ 2 N2/ 2    최선, 평균, 최악의 경우 예를 들어 다룰 데이터가 대부분 역순으로 정렬될 것이라고 예상한다면 선택 정렬이 가장 빠르며 데이터가 어떨지 전혀 알 수 없다면 기본적으로 평균적인 경우이며 둘 다 같다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/7%EC%9E%A5.-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/7%EC%9E%A5.-%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94/</guid>
      <description>7장. 해시 테이블로 매우 빠른 룩업 제품마다 다른 가격을 가지고 있는 데이터가 있다.
이때 배열을 사용할 경우 비효율적이다.
const prod = [[&amp;#39;운동화&amp;#39;, 1000], [&amp;#39;구두&amp;#39;, 2000], [&amp;#39;농구공&amp;#39;, 3000]] 제품 구매가 발생했을 때 어떤 제품을 구매했는지 찾아야 할 때 일일이 순회해야 하기 때문이다. 정렬된 배열의 경우라도 log N의 복잡도로 이뤄진다.
이 때 해시 테이블을 사용하면 O(1) 만에 검색할 수 있게 된다.
해시 테이블이란 해시 테이블은 여러 프로그래밍 언어에서 다른 이름으로 불린다.
해시, 맵, 해시 맵, 딕셔너리, 연관 배열 등의 이름을 갖는다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%EB%88%84%EA%B5%AC%EB%82%98-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/readme/</guid>
      <description>누구나 자료 구조와 알고리즘 목차  자료 구조가 중요한 까닭 알고리즘이 중요한 까닭 빅 오 표기법 빅 오로 코드 속도 올리기 빅 오를 사용하거나 사용하지 않는 코드 최적화 긍정적인 시나리오 최적화 해시 테이블로 매우 빠른 룩업 스택과 큐로 간결한 코드 생성 재귀를 사용한 재귀적 반복 속도를 높이는 재귀 알고리즘 노드 기반 자료 구조 이진 트리로 속도 향상 그래프로 뭐든지 연결하기 그래프로 뭐든지 연결하기  1장. 자료구조가 중요한 까닭    프로그래밍은 데이터를 다루는 일이다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%ED%95%9C-%EA%B6%8C%EC%9C%BC%EB%A1%9C-%EC%9D%BD%EB%8A%94-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%99%80-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A1%B0%EB%84%88%EC%84%A0-%EC%8A%A4%ED%83%80%EC%9D%B8%ED%95%98%ED%8A%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%ED%95%9C-%EA%B6%8C%EC%9C%BC%EB%A1%9C-%EC%9D%BD%EB%8A%94-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%99%80-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%A1%B0%EB%84%88%EC%84%A0-%EC%8A%A4%ED%83%80%EC%9D%B8%ED%95%98%ED%8A%B8/</guid>
      <description>한 권으로 읽는 컴퓨터 구조와 프로그래밍 (조너선 스타인하트) 목차 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%ED%95%A8%EC%88%98%ED%98%95-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A3%A8%EC%9D%B4%EC%8A%A4-%EC%95%84%ED%85%90%EC%8B%9C%EC%98%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%ED%95%A8%EC%88%98%ED%98%95-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A3%A8%EC%9D%B4%EC%8A%A4-%EC%95%84%ED%85%90%EC%8B%9C%EC%98%A4/</guid>
      <description>함수형 자바스크립트 왜 함수형인가 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/2021/%ED%95%A8%EC%88%98%ED%98%95-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%88%EC%9D%B4%ED%81%B4-%ED%8F%AC%EA%B1%B0%EC%8A%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/2021/%ED%95%A8%EC%88%98%ED%98%95-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%A7%88%EC%9D%B4%ED%81%B4-%ED%8F%AC%EA%B1%B0%EC%8A%A4/</guid>
      <description>함수형 자바스크립트 (마이클 포거스) 목차 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/books/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/books/readme/</guid>
      <description>books 독서 기록
2021 읽을 책 목록   함수형 자바스크립트 (루이스 아텐시오) 초판 2018 함수형 자바스크립트 (마이클 포거스) 초판 2014 ECMAScript 6 길들이기 (나라얀 프루스티) 초판 2015 Doit! 타입스크립트 프로그래밍 (전예홍) 초판 2020 Doit! Node.js 프로그래밍 (정재곤) 초판 2017 한 권으로 읽는 컴퓨터 구조와 프로그래밍 (조너선 스타인하트) 초판 2019   </description>
    </item>
    
  </channel>
</rss>
