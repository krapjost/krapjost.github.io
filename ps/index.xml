<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PS on My New Hugo Site</title>
    <link>https://krapjost.github.io/ps/</link>
    <description>Recent content in PS on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://krapjost.github.io/ps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/4kyu/roman_numeral_helper.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/4kyu/roman_numeral_helper.js/</guid>
      <description>/* Create a RomanNumerals class that can convert a roman numeral to and from an integer value. It should follow the API demonstrated in the examples below. Multiple roman numeral values will be tested for each helper method.
Modern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/convert_string_to_camel_case.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/convert_string_to_camel_case.js/</guid>
      <description>function toCamelCase1(str){ return str.replace(/([-_])+\w/ig, function(match) { return match.charAt(match.length - 1).toUpperCase(); }); }
function toCamelCase2(str){ if (!str) { return &amp;quot;&amp;quot; } let result if (/[a-z]/.test(str[0])){ str.includes(&#39;-&#39;) ? (()=&amp;gt;{ result = str.split(&#39;-&#39;).map(s=&amp;gt;s[0].toUpperCase()+s.slice(1)).join(&#39;&#39;) result = result.replace(result[0], result[0].toLowerCase()) })() : (()=&amp;gt;{ result = str.split(&#39;&#39;).map(s=&amp;gt;s[0].toUpperCase()+s.slice(1)).join(&#39;&#39;) result = result.replace(result[0], result[0].toLowerCase()) })() } else { str.includes(&#39;-&#39;) ? result = str.split(&#39;-&#39;).map(s=&amp;gt;s[0].toUpperCase()+s.slice(1)).join(&#39;&#39;) : result = str.split(&#39;&#39;).map(s=&amp;gt;s[0].toUpperCase()+s.slice(1)).join(&#39;&#39;) } return result; }
console.log(toCamelCase1(&amp;lsquo;camel&amp;ndash;case&amp;ndash;Me&amp;rsquo;)) console.log(toCamelCase2(&amp;lsquo;Camel__case__me&amp;rsquo;))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/create_phone_number.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/create_phone_number.go/</guid>
      <description>/* input = [1,2,3,4,5,6,7,8,9,0] output = &amp;ldquo;(123) 456-7890&amp;rdquo; */ package kata import ( &amp;ldquo;strconv&amp;rdquo; )
func CreatePhoneNumber1(numbers [10]uint) string { var phoneNumber = &amp;ldquo;(&amp;rdquo; for i, v := range numbers { s := strconv.Itoa(int(v)) if i&amp;lt;2 { phoneNumber += s } if i == 2 { phoneNumber += s+&amp;quot;) &amp;quot; } if i&amp;gt;2 &amp;amp;&amp;amp; i&amp;lt;5 { phoneNumber += s } if i == 5 { phoneNumber += s+&amp;quot;-&amp;quot; } if i&amp;gt;5 { phoneNumber += s } } return phoneNumber }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/create_phone_number.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/create_phone_number.js/</guid>
      <description>/* input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] output = &amp;ldquo;(123) 456-7890&amp;rdquo; */
function createPhoneNumber1(numbers){ return numbers.reduce((p,c) =&amp;gt; p.replace(&amp;lsquo;x&amp;rsquo;,c), &amp;ldquo;(xxx) xxx-xxxx&amp;rdquo;); }
function createPhoneNumber2(numbers){ const a = numbers.slice(0, 3) const b = numbers.slice(3, 6) const c = numbers.slice(6) return (${a.join(&#39;&#39;)}) ${b.join(&#39;&#39;)}-${c.join(&#39;&#39;)} }
/* what i learn
1. making format string first makes things much easier.  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/detect_pangram.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/detect_pangram.js/</guid>
      <description>function isPangram(string){ return [&amp;hellip;&amp;ldquo;qwertyuiopasdfghjklzxcvbnm&amp;rdquo;] .every(l=&amp;gt;string.toLowerCase().includes(l)) }
function isPangram2(string){ const letters = [&amp;lsquo;a&amp;rsquo;,&amp;lsquo;b&amp;rsquo;,&amp;lsquo;c&amp;rsquo;,&amp;rsquo;d&#39;,&amp;lsquo;e&amp;rsquo;,&amp;lsquo;f&amp;rsquo;,&amp;lsquo;g&amp;rsquo;, &amp;lsquo;h&amp;rsquo;,&amp;lsquo;i&amp;rsquo;,&amp;lsquo;j&amp;rsquo;,&amp;lsquo;k&amp;rsquo;,&amp;lsquo;l&amp;rsquo;,&amp;rsquo;m&#39;,&amp;lsquo;n&amp;rsquo;, &amp;lsquo;o&amp;rsquo;,&amp;lsquo;p&amp;rsquo;,&amp;lsquo;q&amp;rsquo;,&amp;lsquo;r&amp;rsquo;,&amp;rsquo;s&#39;,&amp;rsquo;t&#39;,&amp;lsquo;u&amp;rsquo;, &amp;lsquo;v&amp;rsquo;,&amp;lsquo;w&amp;rsquo;,&amp;lsquo;x&amp;rsquo;,&amp;lsquo;y&amp;rsquo;,&amp;lsquo;z&amp;rsquo;] let cnt = 0 for (let i=0; i&amp;lt;=letters.length; i++) { if (string.toLowerCase().includes(letters[i])) { cnt ++ } } return cnt === letters.length ? true : false }
console.log(isPangram(&amp;ldquo;The quick brown fox jumps over the lazy dog.&amp;quot;)) console.log(isPangram2(&amp;ldquo;The quick brown fox jumps over the lazy dog.&amp;quot;))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/find_the_odd_int.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/find_the_odd_int.js/</guid>
      <description>const findOdd = (A) =&amp;gt; A.reduce((a, b, i) =&amp;gt; { console.log(${i}:: a,b : ${a},${b}; a ^ b : ${a^b}); return a^b} );
function findOdd2(A) { const result = A.sort().reduce((acc,cur,i)=&amp;gt;{acc.push(cur); if (acc.length &amp;gt; 0 &amp;amp;&amp;amp; acc[acc.length-2] - cur === 0){ acc[acc.length-2]=&amp;quot;&amp;quot;, acc[i]=&amp;quot;&amp;quot; } return acc },[]) return result.filter(x=&amp;gt;Number.isInteger(x))[0] }
console.log(findOdd([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5])) console.log(findOdd2([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/good_vs_evil.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/good_vs_evil.js/</guid>
      <description>function goodVsEvil1(good, evil){ const gv = {0:1,1:2,2:3,3:3,4:4,5:10} const ev = {0:1,1:2,2:2,3:2,4:3,5:5,6:10}
const ga = good.split(&#39; &amp;lsquo;), ea = evil.split(&amp;rsquo; &amp;lsquo;);
let es = 0, gs =0; for (let i=0; i &amp;lt; ea.length; i++){ if (ea[i]&amp;gt;0){ es += ev[i]*ea[i] } } for (let i=0; i &amp;lt; ga.length; i++){ if (ga[i]&amp;gt;0){ gs += gv[i]*ga[i] } } if (gs===es) { return &amp;lsquo;Battle Result: No victor on this battle field&amp;rsquo; } if (gs &amp;gt; es) { return &amp;lsquo;Battle Result: Good triumphs over Evil&amp;rsquo; } else { return &amp;lsquo;Battle Result: Evil eradicates all trace of Good&amp;rsquo; } }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/ip_validation.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/ip_validation.js/</guid>
      <description>function isValidIP1(str) { function reducer(acc, v){ const n = Number(v) if (v===n.toString()&amp;amp;&amp;amp;n&amp;lt;256&amp;amp;&amp;amp;n&amp;gt;=0){ acc.push(n)
} return acc } let result = str.split(&#39;.&#39;).reduce(reducer, []).length === 4 return result }
function isValidIP2(str) { const rgx = /^(?:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(.(?!$)|$)){4}$/ return rgx.test(str) }
console.log(isValidIP1(&amp;ldquo;asd.123.123.-123&amp;rdquo;)) console.log(isValidIP2(&amp;quot;\n123.123.123.123&amp;quot;))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/the_vowel_code.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/the_vowel_code.js/</guid>
      <description>/* For example, encode(&amp;ldquo;hello&amp;rdquo;) would return &amp;ldquo;h2ll4&amp;rdquo;. There is no need to worry about uppercase vowels in this kata.
Step 2: Now create a function called decode() to turn the numbers back into vowels according to the same pattern shown above.
For example, decode(&amp;ldquo;h3 th2r2&amp;rdquo;) would return &amp;ldquo;hi there&amp;rdquo;. */
// My Solution function encode(string) { return [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;e&amp;rdquo;,&amp;ldquo;i&amp;rdquo;,&amp;ldquo;o&amp;rdquo;,&amp;ldquo;u&amp;rdquo;].reduce((acc, cur, idx) =&amp;gt; { return acc.replace(RegExp(cur, &amp;ldquo;g&amp;rdquo;), idx+1) }, string) }
function decode(string) { return [&amp;ldquo;a&amp;rdquo;,&amp;ldquo;e&amp;rdquo;,&amp;ldquo;i&amp;rdquo;,&amp;ldquo;o&amp;rdquo;,&amp;ldquo;u&amp;rdquo;].</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/6kyu/who_likes_it.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/6kyu/who_likes_it.js/</guid>
      <description>function likes1(names) { if (names.length === 0) { return &amp;lsquo;no one likes this&amp;rsquo; } if (names.length === 1) { return ${names[0]} likes this } if (names.length === 2) { return ${names[0]} and ${names[1]} like this } if (names.length === 3) { return ${names[0]}, ${names[1]} and ${names[2]} like this } if (names.length &amp;gt;= 4) { return ${names[0]}, ${names[1]} and ${names.length -2} others like this } }
function likes2(names) { return { 0: no one likes this, 1: ${names[0]} likes this, 2: ${names[0]} and ${names[1]} like this, 3: ${names[0]}, ${names[1]} and ${names[2]} like this, 4: ${names[0]}, ${names[1]} and ${names.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/binary_addition.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/binary_addition.js/</guid>
      <description>function addBinary1(a,b) { let sum = a+b let result = &amp;quot;&amp;quot;
while (1 &amp;lt; sum) { result += ${parseInt(sum)%2} sum = sum/2 } return [&amp;hellip;result].reverse().join(&amp;quot;&amp;quot;) }
function addBinary2(a,b) { return (a+b).toString(2) }
console.log(addBinary1(14,39)) console.log(addBinary2(14,39))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/complementary_dna.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/complementary_dna.js/</guid>
      <description>/* In DNA strings, symbols &amp;ldquo;A&amp;rdquo; and &amp;ldquo;T&amp;rdquo; are complements of each other, as &amp;ldquo;C&amp;rdquo; and &amp;ldquo;G&amp;rdquo;. You have function with one side of the DNA (string, except for Haskell); you need to get the other complementary side. DNA strand is never empty or there is no DNA at all (again, except for Haskell).
&amp;quot;A&amp;quot; -&amp;gt; &amp;quot;T&amp;quot; &amp;quot;T&amp;quot; -&amp;gt; &amp;quot;A&amp;quot; &amp;quot;G&amp;quot; -&amp;gt; &amp;quot;C&amp;quot; &amp;quot;C&amp;quot; -&amp;gt; &amp;quot;G&amp;quot; Example	DNAStrand (&amp;quot;ATTGC&amp;quot;) // return &amp;quot;TAACG&amp;quot; DNAStrand (&amp;quot;GTAT&amp;quot;) // return &amp;quot;CATA&amp;quot;  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/count_the_divisors_of_a_number.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/count_the_divisors_of_a_number.js/</guid>
      <description>let bf, af, ms;
const getDivisorsCnt1 = (n) =&amp;gt; { let i = n, c = 0; while (i&amp;gt;0){ if (n % i === 0) c++; i&amp;ndash;; } return c; }
function getDivisorsCnt2(n){ let cnt = 1 for (let d=n/2; d&amp;gt;=1; d&amp;ndash;){ if (Number.isInteger(n/d)){ cnt ++ } } return cnt }
bf = Date.now() console.log(getDivisorsCnt1(50000)) af = Date.now() ms = new Date(af - bf).getMilliseconds() console.log(&amp;ldquo;time took :&amp;rdquo;, ms, &amp;ldquo;ms&amp;rdquo;)
bf = Date.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/descending_order.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/descending_order.js/</guid>
      <description>/* Examples: Input: 42145 Output: 54421
Input: 145263 Output: 654321
Input: 123456789 Output: 987654321 */
function descendingOrder(n){ return +n.toString().split(&#39;&#39;).sort((a,b)=&amp;gt;b-a).join(&#39;&#39;) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/disemvowel_trolls.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/disemvowel_trolls.js/</guid>
      <description>/* Your task is to write a function that takes a string and return a new string with all vowels removed.
For example, the string &amp;ldquo;This website is for losers LOL!&amp;rdquo; would become &amp;ldquo;Ths wbst s fr lsrs LL!&amp;rdquo;.
Note: for this kata y isn&amp;rsquo;t considered a vowel. */
function disemvowel(str) { return str.replace(/[aeiou]/ig, &amp;ldquo;&amp;quot;) }
/* 배운 것
1. string.replace(비교가능한 값, 바꿀 값)  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/exes_and_ohs.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/exes_and_ohs.js/</guid>
      <description>/* 주어진 문자열에 x와 o의 수가 일치하면 true 아니면 false 리턴 빈 문자열은 수가 일치하는 것으로 간주 */
// best practice function XO(str) { let x = str.match(/x/gi); let o = str.match(/o/gi); return (x &amp;amp;&amp;amp; x.length) === (o &amp;amp;&amp;amp; o.length); }
// my solution function XO(str) { if (str.length === 0) return true const xArr = str.match(/x/ig) const oArr = str.match(/o/ig) if (xArr &amp;amp;&amp;amp; oArr) { return xArr.length === oArr.length } return false }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/get_the_middle_character.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/get_the_middle_character.js/</guid>
      <description>/*
Kata.getMiddle(&amp;ldquo;test&amp;rdquo;) should return &amp;ldquo;es&amp;rdquo;
Kata.getMiddle(&amp;ldquo;testing&amp;rdquo;) should return &amp;ldquo;t&amp;rdquo;
Kata.getMiddle(&amp;ldquo;middle&amp;rdquo;) should return &amp;ldquo;dd&amp;rdquo;
Kata.getMiddle(&amp;ldquo;A&amp;rdquo;) should return &amp;ldquo;A&amp;rdquo;
*/
//Best practice function getMiddle(s){ return s.slice((s.length-1)/2, s.length/2+1); } // or const getMiddle = s =&amp;gt; s.slice((s.length-1)/2, s.length/2+1); // or const getMiddle = s =&amp;gt; s.substring((s.length-1)/2, s.length/2+1);
//My solution function getMiddle(s) { if (s.length % 2) { return s.substring(s.length/2, s.length/2+1) } return s.substring(s.length/2-1, s.length/2+1) }
/* 배운 것
1. substring과 slice 모두 인자에 float이 들어오면 소숫점을 버린 int로 인식한다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/highest_and_lowest.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/highest_and_lowest.js/</guid>
      <description>/*
Example highAndLow(&amp;quot;1 2 3 4 5&amp;quot;); // return &amp;quot;5 1&amp;quot; highAndLow(&amp;quot;1 2 -3 4 5&amp;quot;); // return &amp;quot;5 -3&amp;quot; highAndLow(&amp;quot;1 9 3 4 -5&amp;quot;); // return &amp;quot;9 -5&amp;quot;  */
// My solution function highAndLow(numbers){ const sorted = numbers.split(&amp;quot; &amp;ldquo;).sort((a, b)=&amp;gt;a-b) return ${sorted[sorted.length-1]} ${sorted[0]} }
// Best Practice function highAndLow(numbers){ numbers = numbers.split(&#39; &amp;lsquo;); return ${Math.max(...numbers)} ${Math.min(...numbers)}; }
/*
배운 것 1. 정확한 Math.max와 spread 연산자 사용법 numbers split 하면 string 배열이지만 숫자로 인식해준다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/mumbling.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/mumbling.go/</guid>
      <description>/* accum(&amp;ldquo;abcd&amp;rdquo;) -&amp;gt; &amp;ldquo;A-Bb-Ccc-Dddd&amp;rdquo; accum(&amp;ldquo;RqaEzty&amp;rdquo;) -&amp;gt; &amp;ldquo;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&amp;rdquo; accum(&amp;ldquo;cwAt&amp;rdquo;) -&amp;gt; &amp;ldquo;C-Ww-Aaa-Tttt&amp;rdquo; */
package kata import &amp;ldquo;strings&amp;rdquo;
// My Solution func Accum(s string) string { uS := strings.ToUpper(s); var res string; for i := 0; i &amp;lt; len(uS); i++ { res += string(uS[i]) for k := 1; k &amp;lt;= i; k++ { res += string(strings.ToLower(string(uS[i]))) } if i == len(uS)-1 { break } res += &amp;ldquo;-&amp;rdquo; } return res }
// Best Practice func Accum2(s string) string { parts := make([]string, len(s))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/mumbling.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/mumbling.js/</guid>
      <description>/* accum(&amp;ldquo;abcd&amp;rdquo;) -&amp;gt; &amp;ldquo;A-Bb-Ccc-Dddd&amp;rdquo; accum(&amp;ldquo;RqaEzty&amp;rdquo;) -&amp;gt; &amp;ldquo;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&amp;rdquo; accum(&amp;ldquo;cwAt&amp;rdquo;) -&amp;gt; &amp;ldquo;C-Ww-Aaa-Tttt&amp;rdquo; */
function accum(s) { return s.split(&amp;quot;&amp;quot;).reduce((acc,char,idx)=&amp;gt;{ acc.push(char.toUpperCase() + char.toLowerCase().repeat(idx)) return acc }, []).join(&amp;quot;-&amp;quot;) }
/* 배운 것
1. string.reapeat(count) 2. 누산기 초기값을 배열로 두고 push 할 때 바로 리턴하면 안됨.  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/mumbling.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/mumbling.py/</guid>
      <description>&#39;&#39;&#39; accum(&amp;ldquo;abcd&amp;rdquo;) -&amp;gt; &amp;ldquo;A-Bb-Ccc-Dddd&amp;rdquo; accum(&amp;ldquo;RqaEzty&amp;rdquo;) -&amp;gt; &amp;ldquo;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&amp;rdquo; accum(&amp;ldquo;cwAt&amp;rdquo;) -&amp;gt; &amp;ldquo;C-Ww-Aaa-Tttt&amp;rdquo; &#39;&#39;&#39;
my solution def accum(s): S = s.upper() r = &amp;quot;&amp;quot; for c in enumerate(S): r += c[1] for i in range(c[0]): r += c[1].lower() if c[0]==len(s)-1: break r += &amp;ldquo;-&amp;rdquo; return r
best practice def accum(s): return &amp;lsquo;-&#39;.join(c.upper() + c.lower() * i for i, c in enumerate(s))
&#39;&amp;rsquo;&#39; 배운 것
1. enumerate 쓰면 순회하는 아이템에 (index, value) 튜플로 담긴다. 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/shortest_word.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/shortest_word.js/</guid>
      <description>/* 단어들로 이뤄진 문자열이 주어지면 그 중 가장 짧은 단어의 길이를 리턴하라. */
//my first solution function findShort(s){ return s.split(&#39; &amp;lsquo;).sort((a,b)=&amp;gt;a.length-b.length)[0].length }
//best practice function findShort(s){ return Math.min.apply(null, s.split(&amp;rsquo; &amp;lsquo;).map(w =&amp;gt; w.length)); }
//my second solution function findShort(s){ return Math.min(&amp;hellip;s.split(&amp;rsquo; &amp;lsquo;).map(x=&amp;gt;x.length)) }
/* 배운 것
Math.min.apply apply는 공부해두면 활용도가 높을 것 같다. map에 전개 연산자를 넣어도 잘 동작한다.  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/square_every_digits.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/square_every_digits.js/</guid>
      <description>/* For example, if we run 9119 through the function, 811181 will come out, because 92 is 81 and 12 is 1. */
function squareDigits(num){ return +num.toString().split(&amp;quot;&amp;quot;).map(x=&amp;gt;x*x).join(&amp;quot;&amp;quot;) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/sum_of_odd_numbers.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/sum_of_odd_numbers.js/</guid>
      <description>function rowSumOddNumbers(n) { const s_num = (n * n)-n+1; let result = s_num; let a_num = 0; for (let i = 1; i &amp;lt; n; i++) { a_num += 2i } result = (resultn)+a_num return result; }
function rowSumOddNumbers(n) { return nnn }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/triangle_area.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/triangle_area.js/</guid>
      <description>/* space is one length unit; get the area of given triangle
Example . . . . . . ---&amp;gt; should return 2.0 . . . . . . . . . . ---&amp;gt; should return 4.5  */
// My Solution function tArea(tStr) { const arr = tStr.split(&#39;\n&#39;); const side = arr[arr.length-2].match(/\s/g).length return side*side/2 }
// Best Practice function tArea(tStr) { const side = tStr.split(&#39;\n&#39;).length - 3 return (side * side) / 2 }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/7kyu/you_are_square.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/7kyu/you_are_square.js/</guid>
      <description>/* 주어진 숫자에 제곱근이 있다면 true || false
 25 =&amp;gt; true 26 =&amp;gt; false  */
// my solution function isSquare(n) { return Number.isInteger(Math.sqrt(n)) }
// clever function isSquare(n) { n = Math.sqrt(n); return ~~n === n; } /* 제곱근을 구하는 내장함수 sqrt &amp;lsquo;~&amp;rsquo; 연산자는 비트를 역전시킨다.
 0 =&amp;gt; 1; 1 =&amp;gt; 0; 비트 연산자는 내부적으로 연산되는 수를 32-bit integer로 다룬다. 따라서 float 타입을 integer로 변환시키는 작업에도 사용할 수 있다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/abbreviate_a_two_word_name.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/abbreviate_a_two_word_name.go/</guid>
      <description>package kata import &amp;ldquo;strings&amp;rdquo; import &amp;ldquo;fmt&amp;rdquo;
func AbbrevName(name string) string{ words := strings.Split(name, &amp;quot; &amp;ldquo;) return strings.ToUpper(string(words[0][0])) + &amp;ldquo;.&amp;rdquo; + strings.ToUpper(string(words[1][0])) }
func AbbrevName2(name string) string{ arr := strings.Split(name, &amp;quot; &amp;ldquo;) return fmt.Sprintf(&amp;quot;%s.%s&amp;rdquo;, strings.ToUpper(string([]rune(arr[0])[0])), strings.ToUpper(string([]rune(arr[1])[0]))) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/abbreviate_a_two_word_name.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/abbreviate_a_two_word_name.js/</guid>
      <description>function firstLetterOf(arr, index) { return arr[index][0].toUpperCase() } function abbrevName(name){ const arr = name.split(&#39; &amp;lsquo;) return ${firstLetterOf(arr, 0)}.${firstLetterOf(arr, 1)} }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/abbreviate_a_two_word_name.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/abbreviate_a_two_word_name.py/</guid>
      <description>def abbrev_name(name): arr = name.split() return arr[0][0].upper()+&#39;.&#39;+arr[1][0].upper()</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_lost_without_a_map.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_lost_without_a_map.go/</guid>
      <description>package kata
func Maps(x []int) (res []int) { for _, v := range x { res = append(res, v*2) } return }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_lost_without_a_map.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_lost_without_a_map.js/</guid>
      <description>function maps(x){ return x.map(x=&amp;gt;x*2) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_lost_without_a_map.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_lost_without_a_map.py/</guid>
      <description>def maps(a): return list(map(lambda x: x*2, a))
def maps2(a): res = [] for v in a: res.append(v*2) return res</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_series2_clock.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_series2_clock.go/</guid>
      <description>// invalid indirect of 2 (type untyped number) // go에서는 ** 연산자가 제곱이 아니다. 포인터가 가리키는 메모리의 값을 가져오는 듯 func Past(h, m, s int) int { return (h*60**2+m*60+s)*1000 } package kata
func Past(h, m, s int) int { return (h6060+m*60+s)*1000 }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_series2_clock.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_series2_clock.js/</guid>
      <description>Clock shows h hours, m minutes and s seconds after midnight.
Your task is to write a function which returns the time since midnight in milliseconds.
function past(h, m, s){ return s1000 + m100060 + h10006060 }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_series2_clock.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/beginner_series2_clock.py/</guid>
      <description>def past(h, m, s): return (h60**2+m60+s)*1000</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/century_from_year.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/century_from_year.js/</guid>
      <description>// 년도를 받고 세기를 리턴한다. // Given a year, return the century it is in.
function century1 (year) { return (year + 99) / 100 | 0; }
const century2 = (y) =&amp;gt; Math.ceil(y/100)
/* 배운 것
1. 비트단위 논리합 &#39;|&#39; 연산자, 비트단위 연산에 익숙해지고 싶다. 아직 잘 모르겠음. 2. Math.round는 반올림, Math.ceil은 주어진 수보다 크거나 같은 수 중 가장 작은 정수를 반환한다.  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/convert_boolean_values_to_strings.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/convert_boolean_values_to_strings.go/</guid>
      <description>package kata
func BoolToWord(word bool) string { if word { return &amp;ldquo;Yes&amp;rdquo; } return &amp;ldquo;No&amp;rdquo; }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/convert_boolean_values_to_strings.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/convert_boolean_values_to_strings.js/</guid>
      <description>function boolToWord( bool ){ return bool ? &amp;ldquo;Yes&amp;rdquo; : &amp;ldquo;No&amp;rdquo; }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/convert_boolean_values_to_strings.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/convert_boolean_values_to_strings.py/</guid>
      <description>def bool_to_word1(boolean): return &amp;ldquo;Yes&amp;rdquo; if boolean else &amp;ldquo;No&amp;rdquo;
def bool_to_word2(boolean): if boolean: return &amp;ldquo;Yes&amp;rdquo; return &amp;ldquo;No&amp;rdquo;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/even_or_odd.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/even_or_odd.js/</guid>
      <description>// 숫자를 인자로 받고 홀수면 &amp;ldquo;Odd&amp;rdquo; 아니면 &amp;ldquo;Even&amp;rdquo; 리턴
const even_or_odd1 = n =&amp;gt; n%2 ? &amp;lsquo;Odd&amp;rsquo; : &amp;lsquo;Even&amp;rsquo;
function even_or_odd2 (number) { return (number%2) ? &amp;lsquo;Odd&amp;rsquo; : &amp;lsquo;Even&amp;rsquo; }
/* 배운 것
1. 삼항연산자에 괄호는 쓰는 게 가독성에 좋을 것 같다. 2. 이렇게 간단한 건 화살표 함수가 좋을 듯! 3. 하지만 화살표 함수에 괄호쓰면 함수 안에 함수인지 헷갈린다.  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/find_the_smallest_integer_in_the_array.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/find_the_smallest_integer_in_the_array.js/</guid>
      <description>// 숫자 배열을 받고 가장 작은 숫자를 리턴 ( 음수 인정 )
//Time: 861ms Passed: 2 Failed: 0 class SmallestIntegerFinder { findSmallestInt(args) { return Math.min(&amp;hellip;args) } }
//Time: 915ms Passed: 2 Failed: 0 const SmallestIntegerFinder = Function; SmallestIntegerFinder.prototype.findSmallestInt = (a) =&amp;gt; Math.min(&amp;hellip;a)
/* 배운 것
1. prototype에 직접 달아줘도 class 문법과 동일하게 동작하는 것 같다. (확실하지 않음)  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/is_n_divisible_by_x_and_y.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/is_n_divisible_by_x_and_y.go/</guid>
      <description>package kata
func IsDivisible(n, x, y int) bool { return (n%x==0 &amp;amp;&amp;amp; n%y==0) }
func IsDivisible2(n, x, y int) bool { if (n%x==0&amp;amp;&amp;amp;n%y==0) {return true} return false }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/is_n_divisible_by_x_and_y.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/is_n_divisible_by_x_and_y.js/</guid>
      <description>function isDivisible(n, x, y) { return n%x+n%y===0 }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/is_n_divisible_by_x_and_y.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/is_n_divisible_by_x_and_y.py/</guid>
      <description>def is_divisible(n,x,y): return n%x==0 and n%y==0</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/multiplication_table_for_number.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/multiplication_table_for_number.js/</guid>
      <description>function multiTable(number) { let res = &amp;lsquo;&#39;; for ( let i = 1; i &amp;lt; 11; i++ ){ if ( i === 10) { res += ${i} * ${number} = ${i*number} } else { res += ${i} * ${number} = ${i*number}+&#39;\n&amp;rsquo; }; }; return res }
function multiTable(number) { let res = &amp;lsquo;&#39;; for ( let i = 1; i &amp;lt; 11; i++ ){ res += ${i} * ${number} = ${i*number}+(i&amp;lt;10 ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/multiply.clj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/multiply.clj/</guid>
      <description>(ns multiply.bug.fix) ;; My solution (defn multiply [a b] (* a b)) ;; Best practice (def multiply *) ( comment 배운 것 1. 클린코드를 쓴 엉클밥은 최후의 프로그래밍 언어가 있다면 클로저일 것이라고 말했다고 한다. 2. 클로저는 statement가 없다. 모두 expression. expression을 포함하는 것이 statement. 정확하게 차이를 정리해서 이해할 것 3. ns는 네임스페이스, def는 정의문, defn은 def + fn 함수를 정의 ) </description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/opposite_number.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/opposite_number.js/</guid>
      <description>// 음수는 양수로, 양수는 음수로
function opposite1(num) { num = -num return num }
const opposite2 = n =&amp;gt; -n
/* 배운 것
1. -를 붙이면 음양수 변환됨.  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/quarter_of_the_year.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/quarter_of_the_year.go/</guid>
      <description>package kata
func QuarterOf1(month int) (res int) { switch month { case 1, 2, 3 : res=1 case 4, 5, 6 : res=2 case 7, 8, 9 : res=3 case 10,11,12: res=4 } return }
func QuarterOf2(month int) int { if month &amp;lt;= 3 { return 1 } if month &amp;lt;= 6 &amp;amp;&amp;amp; month &amp;gt; 3 { return 2 } if month &amp;lt;= 9 &amp;amp;&amp;amp; month &amp;gt; 6 { return 3 } if month &amp;lt;= 12 &amp;amp;&amp;amp; month &amp;gt; 9 { return 4 } return 0 }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/quarter_of_the_year.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/quarter_of_the_year.js/</guid>
      <description>const quarterOf = (month) =&amp;gt; { return Math.ceil(month/3) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/quarter_of_the_year.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/quarter_of_the_year.py/</guid>
      <description>def quarter_of1(month): return (month+2) // 3
from math import ceil def quarter_of2(month): return ceil(month/3)
def quarter_of(month): if month in range(1, 4): return 1 if month in range(4, 7): return 2 if month in range(7, 10): return 3 if month in range(10, 13): return 4</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/remove_first_and_last_character.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/remove_first_and_last_character.js/</guid>
      <description>/* It&amp;rsquo;s pretty straightforward. Your goal is to create a function that removes the first and last characters of a string. You&amp;rsquo;re given one parameter, the original string. You don&amp;rsquo;t have to worry with strings with less than two characters.
문자열의 처음과 마지막 문자를 제거합시다. */
function removeChar1(str){ let newStr = &#39;&#39; for (let i=1, l=str.length-1; i&amp;lt;l; i++) { newStr += str[i] } return newStr };
const removeChar2 = (str) =&amp;gt; str.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/remove_string_spaces.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/remove_string_spaces.js/</guid>
      <description>// 문자열 공백 제거
const noSpace1 = str =&amp;gt; str.replace(/\s/g, &amp;lsquo;&#39;)
function noSpace2 (str) { let newStr = &#39;&amp;rsquo; for(const t of str) { if (t !== &#39; &amp;lsquo;) newStr += t } return newStr }
/* 배운 것
1. regex에서 (space) \s는 공백문자, \S는 공백문자가 아닌 것. 2. 마찬가지로 (digit) \d는 숫자, \D는 숫자 아닌 것. 3. trim(&#39; &#39;)은 문자열의 양끝만 정리해준다.  */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/return_negative.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/return_negative.go/</guid>
      <description>package kata
import ( &amp;ldquo;math&amp;rdquo; )
func MakeNegative(x int) int { num := math.Signbit(float64(x)) if num { return x } return -x }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/revered_strings.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/revered_strings.js/</guid>
      <description>function solution1(str){ let arr = [] let res = &amp;quot;&amp;quot; for (let i = 0 , l = str.length-1; i&amp;lt;=l; l&amp;ndash;){ arr.push(str[l]) res += arr.pop() } return res }
function solution2(str){ return str.split(&amp;quot;&amp;quot;).reverse().join(&amp;quot;&amp;quot;) }
console.log(solution1(&amp;ldquo;reverse me&amp;rdquo;)) console.log(solution2(&amp;ldquo;reverse me&amp;rdquo;))</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/speedcode2.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/speedcode2.js/</guid>
      <description>/* Given two integer arrays a, b, both of length &amp;gt;= 1, create a program that returns true if the sum of the squares of each element in a is strictly greater than the sum of the cubes of each element in b. */
// 다른 사람의 해결법 const sumPwrs = (a, p) =&amp;gt; a.reduce( (s, n) =&amp;gt; s + n ** p, 0); const arrayMadness1 = (a, b) =&amp;gt; sumPwrs(a, 2) &amp;gt; sumPwrs(b, 3);</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/square_sum.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/square_sum.go/</guid>
      <description>package kata
func SquareSum(numbers []int) (result int) { for _, num := range numbers { result += num*num } return }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/square_sum.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/square_sum.js/</guid>
      <description>function squareSum(numbers){ return numbers.reduce((a,b)=&amp;gt;{return a+b*b}, 0) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/square_sum.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/square_sum.py/</guid>
      <description>def square_sum1(numbers): result = 0 for n in numbers: result += n*n return result
def square_sum2(numbers): return sum(x ** 2 for x in numbers)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/string_repeat.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/string_repeat.js/</guid>
      <description>// 숫자와 문자열을 받고 숫자만큼 문자열 반복
function repeatStr (n, s) { let newS = &#39;&#39; for (i=0; i&amp;lt;n; i++) newS += s; return newS }
const repeatStr = (n, s) =&amp;gt; s.repeat(n)
/*배운 것 1. for문도 {} 생략 가능 2. string repeat 메소드 */</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/sum_of_positive.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/sum_of_positive.js/</guid>
      <description>// 숫자 배열을 받고 양수의 합을 리턴, 양수가 없으면 0을 리턴.
function positiveSum(arr) { let sum = 0 for (const x of arr) { (x&amp;gt;0)?sum+=x:null } return sum }
const positiveSum = (arr) =&amp;gt; arr.reduce((acc, x) =&amp;gt; acc + ((x&amp;gt;0) ? x : 0), 0)
/* 배운 것
1. 삼항연산자를 사용할 때 괄호를 신경써서 사용하자! acc + x&amp;gt;0 ? x : 0 ^ 이렇게 하면 안됨. acc + (x&amp;gt;0) ? x : 0 ^ 이래도 안됨 acc + (x&amp;gt;0 ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/summation.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/summation.js/</guid>
      <description>// 숫자를 받고 1부터 숫자까지의 합을 리턴
//Time: 738ms Passed: 105 Failed: 0 function summation1 (num) { let r = 0 for (i=1;i&amp;lt;=num;i++) r+=i return r }
//Time: 725ms Passed: 105 Failed: 0 const summation2 = (n) =&amp;gt; { for (i=1,r=0;i&amp;lt;=n;i++) { r+=i; if (i===n) return r } }
//Time: 713msPassed: 105Failed: 0 const summation3 = n =&amp;gt; n * (n + 1) / 2;
/* 배운 것 1. for문은 바로 리턴이 안된다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/training_js_10.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/training_js_10.js/</guid>
      <description>/* 숫자 배열 하나를 인자로 받아 홀수 배열과 짝수 배열로 나눠 담아 해당 두 배열을 리턴하자. */
// 내 해결 function pickIt1 (arr){ const odd=[],even=[]; for (let i=0, l=arr.length; i&amp;lt;l; i++){ Number.isInteger(arr[i]/2) ? even.push(arr[i]) : odd.push(arr[i]) } return [odd,even]; }
// 다른 사람 해결 참고 function pickIt2 (arr) { const odd = []; const even = [];
for (const x of arr) { ((x % 2) ? odd : even).push(x) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/training_js_29.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/training_js_29.js/</guid>
      <description>/* 1. 2차 배열을 인자로 받고 1차 배열로 푼다. 2. 배열을 내림차순으로 정렬. 3. &amp;lsquo;&amp;gt;&amp;rsquo; 를 구분문자로 하여 문자열로 변환.
eg. bigToSmall([[1,2],[3,4],[5,6]]) should return &amp;quot;6&amp;gt;5&amp;gt;4&amp;gt;3&amp;gt;2&amp;gt;1&amp;quot;  */
// Time: 694ms Passed: 103 Failed: 0 function bigToSmall_1(arr) { return [].concat(&amp;hellip;arr).sort((a,b)=&amp;gt;b-a).join(&#39;&amp;gt;&#39;) }
// Time: 1323ms Passed: 103 Failed: 0 function bigToSmall(arr){ return arr .reduce((acc, x)=&amp;gt; acc.concat(x), []) .sort((a,b)=&amp;gt;b-a) .join(&#39;&amp;gt;&#39;) }
/* 배운 것
1. [].flat() 메소드는 node 11 이상부터 가능 2. sort 메소드 b-a 이면 내림차, a-b 오름차 3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/twice_as_old.go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/twice_as_old.go/</guid>
      <description>package kata import &amp;ldquo;math&amp;rdquo;
func TwiceAsOld(dadYearsOld, sonYearsOld int) int { return int(math.Abs(float64(sonYearsOld*2-dadYearsOld))) }
func TwiceAsOld2(dadYearsOld, sonYearsOld int) int { var res int if (sonYearsOld * 2 &amp;lt; dadYearsOld) { for { if (sonYearsOld * 2 == dadYearsOld) { break } sonYearsOld++; dadYearsOld ++; res++; } } else if (sonYearsOld * 2 &amp;gt; dadYearsOld) { for { if (sonYearsOld * 2 == dadYearsOld) { break } sonYearsOld&amp;ndash;; dadYearsOld&amp;ndash;; res&amp;ndash;; } } return int(math.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/twice_as_old.js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/twice_as_old.js/</guid>
      <description>function twiceAsOld(dadYearsOld, sonYearsOld) { return Math.abs(dadYearsOld - sonYearsOld*2) }</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/gidoong/codewars/8kyu/twice_as_old.py/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/gidoong/codewars/8kyu/twice_as_old.py/</guid>
      <description>def twice_as_old(dad_years_old, son_years_old): return abs(dad_years_old-son_years_old*2)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://krapjost.github.io/ps/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://krapjost.github.io/ps/readme/</guid>
      <description>문제해결기록 PS Logs 매일 한 문제 이상 풀기! solve at least one problem each day codewars 4kyu  roman_numeral_helper.js  6kyu  convert_string_to_camel_case.js create_phone_number.go create_phone_number.js detect_pangram.js find_the_odd_int.js good_vs_evil.js ip_validation.js the_vowel_code.js who_likes_it.js  7kyu  binary_addition.js complementary_dna.js count_the_divisors_of_a_number.js descending_order.js disemvowel_trolls.js exes_and_ohs.js get_the_middle_character.js highest_and_lowest.js mumbling.go mumbling.js mumbling.py shortest_word.js square_every_digits.js sum_of_odd_numbers.js triangle_area.js you_are_square.js  8kyu  Multiply.clj abbreviate_a_two_word_name.go abbreviate_a_two_word_name.js abbreviate_a_two_word_name.py beginner_lost_without_a_map.go beginner_lost_without_a_map.js beginner_lost_without_a_map.py beginner_series2_clock.go beginner_series2_clock.js beginner_series2_clock.py century_from_year.js convert_boolean_values_to_strings.go convert_boolean_values_to_strings.js convert_boolean_values_to_strings.py even_or_odd.js find_the_smallest_integer_in_the_array.js is_n_divisible_by_x_and_y.go is_n_divisible_by_x_and_y.</description>
    </item>
    
  </channel>
</rss>
