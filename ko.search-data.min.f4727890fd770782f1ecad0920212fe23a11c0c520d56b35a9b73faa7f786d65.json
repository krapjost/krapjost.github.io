[{"id":0,"href":"/ko/posts/221018165518-42%EC%84%9C%EC%9A%B8_%ED%94%BC%EC%8B%A0_%ED%9A%8C%EA%B3%A0-ko/","title":"42서울 피신 회고","section":"기록들","content":" C가 왜 중요한지 느낄 수 있었다. # 자바스크립트로 처음 코드를 배웠기 때문에 동적이고, 유연한 프로토타입 기반의 언어를 기준으로 프로그램을 생각하고 있었다.\n그냥 코드를 작성하면 언어가, 컴파일러가 알아서 다 해주니까, 따로 신경써본 적이 없었고, 그러다보니 그 블랙박스 내의 동작은 내가 상상해볼 수 없는 영역이었다.\n\u0026ldquo;잘 작성되었고, 빠르고 인기가 많은\u0026rdquo; 라이브러리들을 찾아 거기서 제공해주는 API를 매뉴얼대로 작성하는 것이 전부였다.\n뭔가 부족하다고 생각이 들었고 이대로 괜찮을지에 대한 불안감은 늘 있었지만 정작 나 스스로 블랙박스를 열어볼 용기와 인내는 없었던 것 같다.\n운이 좋게도 피신 과정을 진행하며 C의 Array를 다뤄보았는데, 그 과정에서 언어가 컴퓨터에 어떤 방식으로 자료를 입출력하는지 들여다볼 수 있었다.\n피신 전에는 부끄럽게도 Array가 List와 같은 것을 말하는 다른 단어인 줄 알고 있었다.\n내가 작성한 코드를 남에게 잘 설명할 수 있다는 것. # 42 과정은 컴퓨터 과학 로드맵을 과제로서 제시해주고 동료 평가라는 방식으로 과제를 해결해나간다.\n과제를 해결하면, 동료가 옆 자리에 와서 코드 리뷰를 해주고, 점수를 부여해준다.\n작성한 코드를 잘 설명하지 못하면, 평가자는 본인이 쓴 코드가 아니라고 판단하고 실패를 줄 수도 있다.\n나는 그 동안 거의 혼자서 코드를 작성했었고 다른 사람에게 내 코드를 설명하고, 평가받을 일이 잘 없었다.\n그러다 보니 처음에는 조금 어색하고 힘들었지만 진행되며 이런 방식이 내 학습에 얼마나 큰 도움이 되는지 몸소 실감할 수 있었다.\n내가 풀고있는 문제를 본인의 문제처럼 고민해주고 해결책을 제시해주시는 고마운 분도 있었고,\n내가 모르고 있던 지식을 설명해주어 부족한 부분을 채워주시는 분도 있었다. 그런 식으로 동료가 전달해주는 지식도 좋았지만,\n정말 좋았던 것은 머릿 속으로만 굴리던 코드 흐름을 입 밖으로 내면서 코드와 내 복잡한 머릿 속이 정돈되는 느낌을 받았다.\n설명할 수 없으면 알고 있다고 할 수 없다.\n그래서 앞으로 코드를 작성하고 다른 사람에게 말로서 설명할 기회가 잘 없다고 하더라도,\n배운 것을 글로써 출력하는 습관을 들여야겠다고 느꼈다.\n세상에 잘하는 사람들이 이렇게 많다. # 전공자는 잘하고, 비전공자는 못한다고 생각하진 않는다.\n내가 비전공자이기 때문에 못한다는 변명을 나도 모르게 하게 될 수 있기 때문이다.\n동료 평가를 다니며 느낀 것은 잘하는 사람들이 정말 많다는 것이었다.\n설명을 들으며 이 사람은 머리가 정말 좋구나, 이 사람은 엄청 성실하구나, 진지하게 공부하고 있구나.\n그런 생각을 하며 나 자신이 많이 초라하게 느껴질 때도 있었다.\n지금 잘하진 않더라도 앞으로가 기대되는 분들도 많았다.\n점수로 본 과정의 당락이 결정되는데도 진도를 그다지 신경쓰지 않고\n잘 모르는 것은 깊이 있게 알고 넘어가려는 자세를 가진 분을 보면\n앞으로 엄청 잘하게 되실 것 같다는 생각이 들었다.\n아쉬웠던 점 # 과정에 대해 아쉬운 점은 없지만, 코로나에 걸려서 너무 아쉬웠다.\n더 많이 배우고, 더 많은 사람들과 얘기를 나눠보고, 더 재밌을 수 있었을텐데.\n"},{"id":1,"href":"/ko/posts/221018160725-pandoc%EC%9C%BC%EB%A1%9C_md%ED%8C%8C%EC%9D%BC_pdf%EB%A1%9C_%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0-ko/","title":"pandoc으로 md파일 pdf로 변환하기","section":"기록들","content":" 패키지 매니저로 pandoc, wkhtmltopdf 를 설치한다.\nyay pandoc yay wkhtmltopdf css 파일을 같은 디렉터리에 위치시킨다.\nwget https://gist.githubusercontent.com/dashed/6714393/raw/ae966d9d0806eb1e24462d88082a0264438adc50/github-pandoc.css css를 적용한 html문서를 만들고, pdf로 출력한다.\npandoc -t html5 --metadata pagetitle=\u0026#34;resume.md\u0026#34; --css=github-pandoc.css resume.md -o res.pdf 상세한 설명은 스택 오버플로우에\u0026hellip;\n"},{"id":2,"href":"/ko/posts/221018112544-%EC%8A%A4%ED%83%9D_stack-ko/","title":"스택 (Stack)","section":"기록들","content":"스택은 자료를 쌓아올리는 방식으로 저장한다. 책을 쌓아둔 것과 같다. 5권의 책을 쌓아뒀을 때, 첫 번째 책을 꺼내보려면 그 책 위의 네 권을 먼저 들어올려야 한다. 이러한 특징을 FILO(First In Last Out), LIFO(Last In First Out). 처음 들어온 게 마지막에 나간다고 줄여 말한다.\n스택은 추상적 자료 구조이고, 이를 구체적으로 어떻게 구현할지는 구현자 마음대로이다.\n"},{"id":3,"href":"/ko/posts/221017200019-%EC%B6%94%EC%83%81%EC%A0%81_%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0-ko/","title":"추상적 자료 구조","section":"기록들","content":"추상 자료형이 말 그대로 자료의 형식만을 정의하는 가장 높은 단계의 추상화라면,\n추상적 자료구조는 해당 자료형을 구체적으로 구현하기 위한 조건들도 함께 정의한다.\n\u0026ldquo;스택(stack)이라는 자료형(data type)의 입출력을 위한 방법에는 push와 pop이 있고, 이 연산들은 O(1)만에 이뤄져야 한다.\u0026quot;\n고 정의된 것이 있다면 이것을 추상적 자료구조라고 말하며, 이를 구현한 것을 구체적 자료구조라고 말한다.\n이렇게 위키피디아 한글 문서에서는 설명하고 있으나 영문판에서는 \u0026lsquo;추상 자료구조\u0026rsquo;와 \u0026lsquo;추상 자료형\u0026rsquo;의 정의 간에 특별한 구분을 두고 있지는 않는 것 같다. 추상 자료형과 자료구조의 차이 정도만 인식하고 있으면 될 것 같다.\n자료구조를 어떻게 정의하여 내부적으로 어떻게 구현했는가는 작성자에게 달려있기에 프로그래밍 언어에 따라 다르다. 예를 들어 스택 (Stack)은 리스트로도 구현할 수 있고 배열 (Array)로도 구현할 수 있다.\n"},{"id":4,"href":"/ko/posts/221017194720-%EC%B6%94%EC%83%81_%EC%9E%90%EB%A3%8C%ED%98%95-ko/","title":"추상 자료형","section":"기록들","content":" 추상 자료형이란 # 추상 자료형은(Abstract Data Type, ADT)는 자료의 형태와 그와 관계된 연산을 수학적으로만 정의한 것이다. 해당 자료형이 내부적으로 어떤 방식으로 구현되는지는 관심이 없다. \u0026lsquo;형\u0026rsquo;과 \u0026lsquo;Type\u0026rsquo;, \u0026lsquo;자료\u0026rsquo;와 \u0026lsquo;Data\u0026rsquo;가 동일한 뜻인 것을 가끔 인지하지 못할 때가 있다.\n정수는 추상 자료형(ADT)이다. \u0026hellip;, -2, -1, 0, 1, 2, \u0026hellip;의 값으로 정의되며, 연산은 더하기, 빼기, 곱하기, 나누기가 가능하고, 대소 비교 등도 가능하다.\n추상적 자료형은 구현 방법을 명시하고 있지 않다는 점에서 자료 구조와 다르다. 비슷한 개념의 추상적 자료 구조는 각 연산의 시간 복잡도를 명기하고 있지만 추상적 자료형에서는 이것조차 명기하지 않는다.\n추상 자료형의 정의 # 어떻게 정의되어야 하는지에 대한 표준화된 약속은 없다. 넓게 나눠보면 \u0026ldquo;명령적\u0026rdquo;(혹은 \u0026ldquo;절차적\u0026rdquo;), \u0026ldquo;기능적\u0026rdquo;(혹은 \u0026ldquo;공리적\u0026rdquo;)인 정의 방식이 있다.\n"},{"id":5,"href":"/ko/posts/221017180001-array-ko/","title":"배열 (Array)","section":"기록들","content":"배열은 연속적인 자료의 나열이다. 배열 내에는 동일한 형(type)의 자료가 나열되어야 한다. 보통의 프로그래밍 언어에서 인덱스는 0부터 시작한다. 루아는 특이하게 1부터 시작한다.\nC에서는 선언 시에 배열로 사용될 메모리 주소의 범위를 정적으로 할당한다. 반면 Javascript에서의 배열은 동적으로 할당되며, 메모리 주소의 연속일 뿐인 C와 다르게 다양한 메서드를 포함하고 있는 객체로 구현되어 있다. 내부 작동은 브라우저의 엔진마다 다를 수 있다고 한다.\nconst arr = [1, 2, 3]; arr[1]; \u0026gt; 2 arr[\u0026#34;1\u0026#34;]; \u0026gt; 2 인덱스는 특이하게 \u0026ldquo;1\u0026quot;로도 1로도 접근 가능한데 내부적으로 toString() 메소드를 호출하기 때문이라고 한다.\n"},{"id":6,"href":"/ko/posts/221017175656-data_structure-ko/","title":"자료구조","section":"기록들","content":"자료구조란 추상 자료형을 구현한 것. 자료(데이터)의 모임, 자료간의 관계, 자료의 입출력 방식.\n왜 자료구조를 알아야 할까 # 주어진 문제를 해결할 때 자료구조를 선택하고 나면 어떤 알고리즘을 사용할지 명확해진다. 구현의 난이도, 결과물의 성능이 자료구조에 크게 의존한다.\n자료구조의 5가지 필수 구성 요소 # 참조 링크\n어떻게 접근 할 것인가. 어떻게 입력 할 것인가. 어떻게 삭제 할 것인가. 어떻게 탐색 할 것인가. 어떻게 정렬 할 것인가. 자료구조 선택 방법 # 자료구조의 분류 # 자료구조는 추상적인 구조인지, 자료간의 관계가 선형(1:1)적인지 비선형적인지 등으로 분류 되어진다.\n추상적 자료 구조 # 스택 (Stack) # 큐 # 트리 # 그래프 # 선형 자료 구조 # 배열(Array) # 리스트(List / Sequence) # "},{"id":7,"href":"/ko/resume/","title":"이력서","section":"소개","content":" 박기둥 # pdf 버전\n\u0026nbsp;그림 그리길 좋아하다 무언가 작동하는 것을 만드는 것을 좋아하게 되었습니다.\n재밌는 것을 만들어 보고 싶다는 생각으로 프로그래밍을 시작했고, 이제는 더 좋은 코드를 작성하고 싶은 생각으로 개발자의 옷을 입고 있습니다.\n\u0026nbsp;앞으로도 무엇이 나를 더 잘 정의하는 말이 될 수 있을지 알아보고 싶습니다.\n- 연락처 # 깃허브 링크드인 이메일 블로그\n- 경험 # 직무 # 기간 회사 직무 개발 스택 2021 01 - 08 나무소프트 프론트엔드 개발 Js/React, Go + Docker + AWS 교육 # 기간 교육 과정 배운 것 요약 회고 2022 08 42 Seoul 라피신 Sh, C 기초 link 2021 09 - 11 멋쟁이 사자처럼 스타트업 스쿨 스타트업 기본 지식, Dart link 2020 07 - 10 구공팩토리 부트캠프 Web 기본 지식, Js 기초 link 프로젝트 # 기간 이름 한 줄 설명 개발 스택 데모 2022 08 러브캡슐 좋아하는 사람을 찾아줍니다. Dart/Flutter + Firebase 동영상 2021 10 제제 화초 키우는 사람을 위한 SNS. Dart/Flutter + Firebase 동영상 2020 08 주차장 시뮬레이터 주차장 출입 기록 프로그램 바닐라Js + NodeJs + MariaDB 동영상 - 컴퓨터 스킬 # 익숙한 도구 # 언어\nJavascript (Web), Dart, Lua, Fennel, Markdown, Org, SQL\n환경\nLinux (Ubuntu, Arch), GCP (Firebase)\n경험해 본 도구 # 언어\nJavascript (Node), Rescript, C, Go, Clojure, Elisp, Python\n환경\nLinux (CentOS), Windows (wsl2), Docker, AWS (EC2)\n- 언어 # 영어 : 중상\n- 관심 # Lisp, Emacs, 오픈 소스, 텍스트 작성 툴. \u0026lt;2022-10-11 Tue\u0026gt; 읽기 쉬운 코드를 작성하는 방법. \u0026lt;2022-10-18 Tue\u0026gt; "}]