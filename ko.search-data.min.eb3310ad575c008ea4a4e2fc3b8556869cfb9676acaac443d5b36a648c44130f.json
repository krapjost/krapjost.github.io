[{"id":0,"href":"/ko/posts/221017200019-%EC%B6%94%EC%83%81%EC%A0%81_%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0-ko/","title":"추상적 자료 구조","section":"기록들","content":"추상 자료형이 자료들이 어떤 식으로 모여있는가 대해서만 관심이 있는 가장 높은 단계의 추상화라면 추상적 자료 구조는 해당 자료형을 구현하기 위한 조건들을 정의한다. \u0026lsquo;스택이라는 추상 자료 구조의 입출력을 위한 방법에는 push와 pop이 있고, 이 연산들은 O(1)만에 이뤄져야 한다\u0026rsquo;고 정의된 것이 있다면 이것을 추상 자료 구조라고 말한다. 이 추상 자료 구조를 구현한 것이 구체적 자료 구조라고 정의하고 있다.\n이렇게 위키피디아 한글 문서에서는 설명하고 있으나 영문판에서는 \u0026lsquo;추상 자료 구조\u0026rsquo;와 \u0026lsquo;추상 자료형\u0026rsquo;의 정의간에 특별한 구분을 두고 있지 않다. 추상 자료형과 자료 구조의 차이 정도만 인식하고 있으면 될 것 같다.\n"},{"id":1,"href":"/ko/posts/221017194720-%EC%B6%94%EC%83%81_%EC%9E%90%EB%A3%8C%ED%98%95-ko/","title":"추상 자료형","section":"기록들","content":"추상 자료형은(Abstract Data Type, ADT)는 자료의 형태와 그와 관계된 연산을 수학적으로만 정의한 것이다. 해당 자료형이 내부적으로 어떤 방식으로 구현되는지는 관심이 없다.\n정수는 추상 자료형(ADT)이다. \u0026hellip;, -2, -1, 0, 1, 2, \u0026hellip;의 값으로 정의되며, 연산은 더하기, 빼기, 곱하기, 나누기가 가능하고, 대소 비교 등도 가능하다.\n추상적 자료형은 구현 방법을 명시하고 있지 않다는 점에서 자료 구조와 다르다. 비슷한 개념의 추상적 자료 구조는 각 연산의 시간 복잡도를 명기하고 있지만 추상적 자료형에서는 이것조차 명기하지 않는다.\n추상 자료형의 정의 # [https://en.wikipedia.org/wiki/Abstract_data_type#:~:text=There%20are%20no%20standard%20conventions%20for%20defining%20them.%20A%20broad%20division%20may%20be%20drawn%20between%20%22imperative%22%20(or%20%22operational%22)%20and%20%22functional%22%20(or%20%22axiomatic%22)%20definition%20styles.][어떻게 정의되어야 하는지에 대한 표준화된 약속은 없다. 넓게 나눠보면 \u0026ldquo;명령적\u0026rdquo;(혹은 \u0026ldquo;절차적\u0026rdquo;), \u0026ldquo;기능적\u0026rdquo;(혹은 \u0026ldquo;공리적\u0026rdquo;)인 정의 방식이 있다.]\n"},{"id":2,"href":"/ko/posts/221017180001-array-ko/","title":"배열 (Array)","section":"기록들","content":"배열은 크기와 인덱스가 정해져 있다.\n접근을 1번만에 할 수 있다. [1, 2, 3]\n"},{"id":3,"href":"/ko/posts/221017175656-data_structure-ko/","title":"자료 구조","section":"기록들","content":" 자료구조 공부 노트 # 자료구조란 추상 자료형을 구현한 것. 자료(데이터)의 모임, 자료간의 관계, 자료의 입출력 방식.\n왜 자료구조를 알아야 할까 # 주어진 문제를 해결할 때 자료구조를 선택하고 나면 어떤 알고리즘을 사용할지 명확해진다. 구현의 난이도나 결과물의 성능이 자료구조에 크게 의존한다.\n자료구조의 5가지 필수 구성 요소 # 어떻게 *접근*할 것인가. (하나의 아이템 / 모든 아이템) 어떻게 *입력*할 것인가. (끝에 / 지정한 위치에) 어떻게 *삭제*할 것인가. (끝에서부터 / 지정한 위치에서) 어떻게 *탐색*할 것인가. (존재한다면 / 어떤 위치에 ) 어떻게 *정렬*할 것인가. (장소에서 정렬 / 정렬된 버전 ) 참조 링크\n자료구조 선택 방법 # 자료구조의 분류 # 타입별 컬렉션, 컨테이너 추상 연관 배열(맵), 리스트, 스택, 큐, 세트 배열 비트 배열, 순환 버퍼, 동적 배열, 해시 맵 링크드 연관 리스트, 링크드 리스트, 스킵 리스트 트리 B-트리, 이진 탐색 트리 (AA, AVL, Red-black, Self-balancing, Splay), 힙, R-트리, 해시 트리(Trie) 그래프 Directed acyclic graph(DAG) 추상 자료 구조 # 스택 큐 트리 그래프 딕셔너리 선형 자료 구조 # 배열(Array) 리스트(List / Sequence) "},{"id":4,"href":"/ko/resume/","title":"이력서","section":"소개","content":" 박기둥 # PDF 버전 link\n- 연락처 # Github LinkedIn Email\n- 경험 # 직무 # 기간 회사 직무 개발 스택 2021 01 - 08 나무소프트 프론트엔드 개발 Js/React, Go + Docker + AWS 교육 # 기간 교육 과정 배운 것 요약 공부 노트 2022 08 42 Seoul 라피신 Sh, C 기초 link 2021 09 - 11 멋쟁이 사자처럼 스타트업 스쿨 스타트업 기본 지식, Dart link 2020 07 - 10 구공팩토리 부트캠프 Web 기본 지식, Js 기초 link 프로젝트 # 기간 이름 한 줄 설명 개발 스택 데모 2022 08 러브캡슐 좋아하는 사람을 찾아줍니다. Dart/Flutter + Firebase 2021 10 화단 화초 키우는 사람을 위한 SNS. Dart/Flutter + Firebase 2020 08 주차장 시뮬레이터 주차장 출입 기록 프로그램 바닐라Js + NodeJs + MariaDB 동영상 - 컴퓨터 스킬 # 익숙한 도구 # 언어\nJavascript (Web), Dart, Lua, Fennel, Markdown, Org, SQL\n환경\nLinux (Ubuntu, Arch), GCP (Firebase)\n경험해 본 도구 # 언어\nJavascript (Node), Rescript, C, Go, Clojure, Elisp, Python\n환경\nLinux (CentOS), Windows (wsl2), Docker, AWS (EC2)\n- 언어 # 영어 : 중상\n- 흥미 # Lisp, Emacs, 오픈 소스, 텍스트 작성 툴. \u0026lt;2022-10-11 Tue\u0026gt; "}]