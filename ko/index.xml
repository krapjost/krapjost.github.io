<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>소개 on 정원</title><link>http://krapjost.github.io/ko/</link><description>Recent content in 소개 on 정원</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 18 Oct 2022 11:25:00 +0900</lastBuildDate><atom:link href="http://krapjost.github.io/ko/index.xml" rel="self" type="application/rss+xml"/><item><title>스택 (Stack)</title><link>http://krapjost.github.io/ko/posts/221018112544-%EC%8A%A4%ED%83%9D_stack-ko/</link><pubDate>Tue, 18 Oct 2022 11:25:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221018112544-%EC%8A%A4%ED%83%9D_stack-ko/</guid><description>스택은 자료를 쌓아올리는 방식으로 저장한다. 책을 쌓아둔 것과 같다. 5권의 책을 쌓아뒀을 때, 첫 번째 책을 꺼내보려면 그 책 위의 네 권을 먼저 들어올려야 한다. 이러한 특징을 FILO(First In Last Out), LIFO(Last In First Out). 처음 들어온 게 마지막에 나간다고 줄여 말한다.
스택은 추상적 자료 구조이고, 이를 구체적으로 어떻게 구현할지는 구현자 마음대로이다.</description></item><item><title>추상적 자료 구조</title><link>http://krapjost.github.io/ko/posts/221017200019-%EC%B6%94%EC%83%81%EC%A0%81_%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0-ko/</link><pubDate>Mon, 17 Oct 2022 20:00:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017200019-%EC%B6%94%EC%83%81%EC%A0%81_%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0-ko/</guid><description>추상 자료형이 말 그대로 자료의 형식만을 정의하는 가장 높은 단계의 추상화라면,
추상적 자료구조는 해당 자료형을 구체적으로 구현하기 위한 조건들도 함께 정의한다.
&amp;ldquo;스택(stack)이라는 자료형(data type)의 입출력을 위한 방법에는 push와 pop이 있고, 이 연산들은 O(1)만에 이뤄져야 한다.&amp;quot;
고 정의된 것이 있다면 이것을 추상적 자료구조라고 말하며, 이를 구현한 것을 구체적 자료구조라고 말한다.
자료구조를 어떻게 정의하여 내부적으로 어떻게 구현했는가는 작성자에게 달려있기에 프로그래밍 언어에 따라 다르다. 예를 들어 스택 (Stack) 스택은 링크드 리스트로도 구현할 수 있고 배열로도 구현할 수 있다.</description></item><item><title>추상 자료형</title><link>http://krapjost.github.io/ko/posts/221017194720-%EC%B6%94%EC%83%81_%EC%9E%90%EB%A3%8C%ED%98%95-ko/</link><pubDate>Mon, 17 Oct 2022 19:47:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017194720-%EC%B6%94%EC%83%81_%EC%9E%90%EB%A3%8C%ED%98%95-ko/</guid><description>추상 자료형이란 # 추상 자료형은(Abstract Data Type, ADT)는 자료의 형태와 그와 관계된 연산을 수학적으로만 정의한 것이다. 해당 자료형이 내부적으로 어떤 방식으로 구현되는지는 관심이 없다. &amp;lsquo;형&amp;rsquo;과 &amp;lsquo;Type&amp;rsquo;, &amp;lsquo;자료&amp;rsquo;와 &amp;lsquo;Data&amp;rsquo;가 동일한 뜻인 것을 가끔 인지하지 못할 때가 있다.
정수는 추상 자료형(ADT)이다. &amp;hellip;, -2, -1, 0, 1, 2, &amp;hellip;의 값으로 정의되며, 연산은 더하기, 빼기, 곱하기, 나누기가 가능하고, 대소 비교 등도 가능하다.
추상적 자료형은 구현 방법을 명시하고 있지 않다는 점에서 자료 구조와 다르다. 비슷한 개념의 추상적 자료 구조는 각 연산의 시간 복잡도를 명기하고 있지만 추상적 자료형에서는 이것조차 명기하지 않는다.</description></item><item><title>배열 (Array)</title><link>http://krapjost.github.io/ko/posts/221017180001-array-ko/</link><pubDate>Mon, 17 Oct 2022 18:00:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017180001-array-ko/</guid><description>배열은 크기와 인덱스가 정해져 있다.
접근을 1번만에 할 수 있다. [1, 2, 3]</description></item><item><title>자료구조</title><link>http://krapjost.github.io/ko/posts/221017175656-data_structure-ko/</link><pubDate>Mon, 17 Oct 2022 17:56:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017175656-data_structure-ko/</guid><description>자료구조란 추상 자료형을 구현한 것. 자료(데이터)의 모임, 자료간의 관계, 자료의 입출력 방식.
왜 자료구조를 알아야 할까 # 주어진 문제를 해결할 때 자료구조를 선택하고 나면 어떤 알고리즘을 사용할지 명확해진다. 구현의 난이도, 결과물의 성능이 자료구조에 크게 의존한다.
자료구조의 5가지 필수 구성 요소 # 참조 링크
어떻게 접근 할 것인가. 어떻게 입력 할 것인가. 어떻게 삭제 할 것인가. 어떻게 탐색 할 것인가. 어떻게 정렬 할 것인가. 자료구조 선택 방법 # 자료구조의 분류 # 자료구조는 추상적인 구조인지, 자료간의 관계가 선형(1:1)적인지 비선형적인지 등으로 분류 되어진다.</description></item><item><title>이력서</title><link>http://krapjost.github.io/ko/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://krapjost.github.io/ko/resume/</guid><description>박기둥 # PDF 버전 link
- 연락처 # Github LinkedIn Email
- 경험 # 직무 # 기간 회사 직무 개발 스택 2021 01 - 08 나무소프트 프론트엔드 개발 Js/React, Go + Docker + AWS 교육 # 기간 교육 과정 배운 것 요약 공부 노트 2022 08 42 Seoul 라피신 Sh, C 기초 link 2021 09 - 11 멋쟁이 사자처럼 스타트업 스쿨 스타트업 기본 지식, Dart link 2020 07 - 10 구공팩토리 부트캠프 Web 기본 지식, Js 기초 link 프로젝트 # 기간 이름 한 줄 설명 개발 스택 데모 2022 08 러브캡슐 좋아하는 사람을 찾아줍니다.</description></item></channel></rss>