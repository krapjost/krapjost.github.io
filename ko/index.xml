<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>소개 on 정원</title><link>http://krapjost.github.io/ko/</link><description>Recent content in 소개 on 정원</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 17 Nov 2022 21:28:00 +0900</lastBuildDate><atom:link href="http://krapjost.github.io/ko/index.xml" rel="self" type="application/rss+xml"/><item><title>소설 연재 플랫폼 개발 일지 009</title><link>http://krapjost.github.io/ko/posts/221117212819-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_009-ko/</link><pubDate>Thu, 17 Nov 2022 21:28:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221117212819-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_009-ko/</guid><description>fulcro를 사용해보고 있다. fulcro는 graph 데이터를 다룰 수 있도록 특화된 풀 스택 프레임워크이다.
자바스크립트 리액트를 처음 배울 때 느낌이다. 속이 꽉 답답한 게 내 멍청함에 화가 난다. 오늘 꼭 이해해서 좀 후련하게 집에 가고 싶다.
이제는 시간이 없다. 죽이 되든 밥이 되든 이 스택으로 끝까지 만들어야지.</description></item><item><title>소설 연재 플랫폼 개발 일지 008</title><link>http://krapjost.github.io/ko/posts/221114144112-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_008-ko/</link><pubDate>Mon, 14 Nov 2022 14:41:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221114144112-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_008-ko/</guid><description>프론트 페이지 라우팅 작업이 끝나고 백엔드 데이터 베이스 구조를 고민하고 있다. 추천 알고리즘을 구현해보고 싶어 조사 중 그래프DB를 알게되어서 공부 중.
소설 연재 플랫폼이면서 동시에 소셜 네트워킹 플랫폼의 역할도 했으면 좋겠다. 내가 좋아하는 소설, 그 소설을 좋아하는 유저들, 그 유저들이 좋아하는 소설. 내가 좋아하는 소설을 쓴 작가가 좋아하는 소설.
좋아한다는게 무엇인지에 대한 생각도 해야할 것 같다. 좋아요를 눌러놓고 잘 보지 않게 되는 글도 있고 그냥 보다보니 끝까지 보게되는 글도 있으니까.</description></item><item><title>소설 연재 플랫폼 개발 일지 007</title><link>http://krapjost.github.io/ko/posts/221112235354-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_007-ko/</link><pubDate>Sat, 12 Nov 2022 23:53:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221112235354-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_007-ko/</guid><description>배운 것 # wallmart에서 개발한 graphQL clojure 구현체 lacinia. 그린랩스에서도 이것을 쓰고 있다. graphQL은 정말 편하다. 성능? 성능 이슈에 대한 글도 있지만 DB를 그래프DB를 쓰면 신경쓰지 않아도 되지 않을까 하는 생각이 든다. RDB에서는 복잡한 쿼리를 한 번에 수행하는데 지수 시간이 걸리지만 그래프DB는 상수 시간으로 쿼리할 수 있다. 어쨌거나 모바일 우선 앱을 만들고 싶기 때문에 graphQL은 좋은 선택이 될 것 같다. Web client &amp;lt;-&amp;gt; http-server &amp;lt;-&amp;gt; graphql resolver &amp;lt;-&amp;gt; docker(datalevin)</description></item><item><title>shadow-grove-</title><link>http://krapjost.github.io/ko/posts/221109170247-shadow_grove-ko/</link><pubDate>Wed, 09 Nov 2022 17:02:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221109170247-shadow_grove-ko/</guid><description>컴포넌트 리스트 그리는 방법 # 아래와 같은 데이터와
(def book-list {:section &amp;#34;Today&amp;#34; :list [{:id &amp;#34;0&amp;#34; :name &amp;#34;book1&amp;#34; :author &amp;#34;doong&amp;#34; :description &amp;#34;rorlame edalkwdqd qwlmdkwmd ql&amp;#34;} {:id &amp;#34;1&amp;#34; :name &amp;#34;book2&amp;#34; :author &amp;#34;ojo&amp;#34; :description &amp;#34;heleld qwdmlkqwd awlkda wk&amp;#34;}]} {:section &amp;#34;Weekly&amp;#34; :list [{:id &amp;#34;4&amp;#34; :name &amp;#34;book5&amp;#34; :author &amp;#34;asdw&amp;#34; :description &amp;#34;asdawd&amp;#34;} {:id &amp;#34;6&amp;#34; :name &amp;#34;book7&amp;#34; :author &amp;#34;qw w w&amp;#34; :description &amp;#34;wqlwd qwldkm qwlkdasd asd&amp;#34;}]}) 아래와 같은 컴포넌트가 있을 때
(defc book-card [{:keys [name author description]}] (render (&amp;lt;&amp;lt; [:a {:class (css :relative :block :h-96)} [:span {:class (css :absolute :inset-0 :border-2 :border-dashed :border-black)}] [:div {:class (css :relative :flex :h-full :items-end :border-2 :border-black :bg-white :transition-transform [:hover {:transform &amp;#34;translate(-0.</description></item><item><title>greenlabs-bootcamp</title><link>http://krapjost.github.io/ko/posts/221108151034-greenlabs_bootcamp-ko/</link><pubDate>Tue, 08 Nov 2022 15:10:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221108151034-greenlabs_bootcamp-ko/</guid><description>함수형은 # 익숙해? 고등학교 2학년 과정에 있음
http://blog.jenkster.com/2015/12/what-is-functional-programming.html
두 뿌리 # 튜링 기계 언어 # 기계에 명령하기 위함
람다 계산 언어 ( Alonzo church ) # 값을 계산하기 위함 ( Applicative language )
자바 스트림?
추상화의 스펙트럼 # goto -&amp;gt;&amp;gt; for loop -&amp;gt;&amp;gt; map/filter/reduce https://www.youtube.com/watch?v=mVVNJKv9esE
닐 포드 함수형 사고
Dev dive 2022 # Why functional programming matters # https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf 모듈식 설계 분해와 좋은 조립이 핵심이다.
조립 수단 # 고차 함수 지연 평가 (lazy eval) 지연평가가 왜 좋은가 rtfeldman - why functional programming isn&amp;rsquo;t norm # IEEE 잡지 Why functional programming should be the future of software development # constacts liftIO 김은민 # 쏙쏙 들어오는 함수형 코딩 저자</description></item><item><title>소설 연재 플랫폼 개발 일지 006</title><link>http://krapjost.github.io/ko/posts/221107200152-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_006-ko/</link><pubDate>Mon, 07 Nov 2022 20:01:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221107200152-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_006-ko/</guid><description>익숙해지는 중 # shadow-css에는 tailwind 방식의 별칭을 사용해 스타일링 할 수 있다. 다른 점은, tailwind가 별칭마다 클래스를 부여하고 그 클래스들은 다 이미 정의되어 있는데 반해, shadow-css는 styled-component처럼 컴포넌트마다 하나의 클래스를 배정한다. tailwind는 프로덕션 빌드 때 사용되지 않는 클래스들을 날린(purge)한 css파일을 얻을 수 있다. shadow-css는 개발 중 저장할 때마다 수정된 부분이 있으면 css를 새로 만들어 준다.
빠르게 개발하고 싶어서 클로저를 선택했지만 빨라지기까지 엄청 오랜 시간이 걸릴 것 같다. 개발 속도가 빠르다는 것은 개발 중 고려해야할 세부적인 부분들을 다 알고 있기 때문이고 클로저를 해보며 느끼는 점은 그 세부적인 부분들을 알아야 다음으로 넘어갈 수 있다는 것이다.</description></item><item><title>매일 하나의 선행을 할일로 보내주기</title><link>http://krapjost.github.io/ko/posts/221101131405-%EB%A7%A4%EC%9D%BC_%ED%95%98%EB%82%98%EC%9D%98_%EC%84%A0%ED%96%89%EC%9D%84_%ED%95%A0%EC%9D%BC%EB%A1%9C_%EB%B3%B4%EB%82%B4%EC%A3%BC%EA%B8%B0-ko/</link><pubDate>Tue, 01 Nov 2022 13:14:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221101131405-%EB%A7%A4%EC%9D%BC_%ED%95%98%EB%82%98%EC%9D%98_%EC%84%A0%ED%96%89%EC%9D%84_%ED%95%A0%EC%9D%BC%EB%A1%9C_%EB%B3%B4%EB%82%B4%EC%A3%BC%EA%B8%B0-ko/</guid><description>가입하면 -&amp;gt; 하면 기분 좋아지는 선행을 투두 리스트 ( 구글 투두? ) 등 사용 중인 투두 리스트에? 할일로 보내준다. 랜덤 발송되는 선행 목록, 프로필에 달 수 있는 뱃지 추가? 많이 수행하면 프로필에 레벨 표시?</description></item><item><title>221101131003-사용자_후기_기획_워크플로우에_통합하는-ko</title><link>http://krapjost.github.io/ko/posts/221101131003-%EC%82%AC%EC%9A%A9%EC%9E%90_%ED%9B%84%EA%B8%B0_%EA%B8%B0%ED%9A%8D_%EC%9B%8C%ED%81%AC%ED%94%8C%EB%A1%9C%EC%9A%B0%EC%97%90_%ED%86%B5%ED%95%A9%ED%95%98%EB%8A%94-ko/</link><pubDate>Tue, 01 Nov 2022 13:10:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221101131003-%EC%82%AC%EC%9A%A9%EC%9E%90_%ED%9B%84%EA%B8%B0_%EA%B8%B0%ED%9A%8D_%EC%9B%8C%ED%81%AC%ED%94%8C%EB%A1%9C%EC%9A%B0%EC%97%90_%ED%86%B5%ED%95%A9%ED%95%98%EB%8A%94-ko/</guid><description>고객들이 원하는 게 있어 개발 요청 설문을 작성해서 보내면 깃헙이나 트렐로 등 사용 중인 할 일 관리 툴과 통합되어 투두 리스트에 추가된다. 아니면 다른 방식으로?</description></item><item><title>clj-kondo</title><link>http://krapjost.github.io/ko/posts/221101035735-clj_kondo-ko/</link><pubDate>Tue, 01 Nov 2022 03:57:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221101035735-clj_kondo-ko/</guid><description>clj-kondo는 # 클로저를 위한 정적 코드 분석도구이다. clojure-lsp에서 내부적으로 사용하고 있다.
문제 # 소설 연재 플랫폼 개발 일지 005에서 잘 작동하는 코드에 lsp가 unresolved symbol 에러를 띄우는 문제가 있었다.
해결 시도 1 # 처음에는 클래스패스를 읽지 못해서 그런가 싶어서 프로젝트 .lsp 디렉터리에 다음 설정을 해보았다.
{:project-specs [{:project-path &amp;#34;shadow-cljs.edn&amp;#34; :classpath-cmd [&amp;#34;shadow-cljs&amp;#34; &amp;#34;classpath&amp;#34;]}]} shadow-cljs.edn이 있는 곳이 프로젝트 루트이고, 클래스패스는 다음 명령으로 읽어라하고 지정했다. 하지만 clojure-lsp는 기본적으로 shadow-cljs.edn 파일이 발견되면 npx shadow-cljs classpath 명령으로 클래스패스를 읽는다고 한다.</description></item><item><title>소설 연재 플랫폼 개발 일지 005</title><link>http://krapjost.github.io/ko/posts/221101020740-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_005-ko/</link><pubDate>Tue, 01 Nov 2022 02:07:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221101020740-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_005-ko/</guid><description>다시 shadow-grove로 # 레퍼런스가 없어서 힘들었었는데 다시 해보니 뭔가 알 것 같다. shadow-cljs를 개발한 thheller가 만들고 있는 cljs 프레임워크인데 하나 하나 설명을 읽어가면서 개척해나가는 재미가 나름 있다. 당연하게 여겼던 hot-reload도 여기서는 직접 구현해야 했다. 다행히 thheller 이 분이 Hot Reload in ClojureScript 라는 아티클을 남겨두셔서 조금 이해할 수 있었다. 나중에 꼭 번역을 해둬야겠다.
Css 관련 배운 것 # css는 가능한 static하게 서빙하는 게 좋다고 한다. 동적으로 런타임에 css를 빌드하게 되면 그만큼 사용자에게 그 비용을 전가하게 된다.</description></item><item><title>소설 연재 플랫폼 개발 일지 004</title><link>http://krapjost.github.io/ko/posts/221026213857-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_004-ko/</link><pubDate>Wed, 26 Oct 2022 21:38:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221026213857-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_004-ko/</guid><description>결과 # css 라이브러리로 garden -&amp;gt; herb -&amp;gt; tachyon 을 사용하기로 정했다. 레퍼런스 삼을만한 사이트들을 찾아봐야겠다.
잡담 # 이맥스와 리습은 좋은 짝꿍이 맞는 것 같다. 어제 라이브 코딩으로 연주하는 영상들을 봤는데 내가 정말 하고 싶은 건 이런 쪽인 것 같다. 열심히 웹 개발 하다가 하루 정도는 supercollider, overtone, shadertone 이런 애들 써봐야겠다. 신기했던 게 supercollider를 common-lisp으로 작성할 수 있게 해주는 라이브러리를 한국 분이 작성하셨던데 엄청 멋있었다. https://www.youtube.com/watch?v=xzTH_ZqaFKI&amp;t=682s</description></item><item><title>emacs에서 웹킷 브라우저 사용하기</title><link>http://krapjost.github.io/ko/posts/221026204351-emacs%EC%97%90%EC%84%9C_%EC%9B%B9%ED%82%B7_%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-ko/</link><pubDate>Wed, 26 Oct 2022 20:43:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221026204351-emacs%EC%97%90%EC%84%9C_%EC%9B%B9%ED%82%B7_%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-ko/</guid><description>왜? # 한영 키 전환을 이맥스와 fcitx가 같이 핸들링하다 보니 불편한 점이 많이 있었다. 크롬 브라우저에서 한영키(fcitx)를 통해 한글로 전환한 후, 이맥스에 돌아오면 아무 키도 먹히지 않는다. 다시 브라우저에 돌아가서 영어로 전환해야만 했다.
그래서 최대한 이맥스 밖을 안 나가는 쪽으로 문제를 해결해보려고 했다. eww로도 충분히 브라우징이 가능했으나 스크래치 버퍼? 미니 버퍼? 에서 보여주는 건지 모르겠으나 자꾸 q만 누르면 창이 꺼진다. 뭔가 개인 설정 파일을 수정하는 걸로 해결될 것 같았지만 다른 방법은 없는지 검색해봤다.</description></item><item><title>cider로 repl 연결하기</title><link>http://krapjost.github.io/ko/posts/221025170044-cider%EB%A1%9C_repl_%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0-ko/</link><pubDate>Tue, 25 Oct 2022 17:00:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221025170044-cider%EB%A1%9C_repl_%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0-ko/</guid><description>refs # 이름공간 변경하기 clj tool로 REPL 시작하기 # 이런 deps.edn 파일이 있다고 했을 때
{:aliases {:dev {...} :test {...}}} 다음 명령어로 aliases와 함께 REPL을 실행할 수 있다.
clj -M:dev:test # 혹은 clj -A:dev:test Namespace 사용하기 # clojure 프로젝트는 ns(namespace)로 스코프를 분리하고 있다. repl 환경에서 (ns dev.server) 을 실행하면 해당 ns를 만들고, 그 공간으로 넘어간다. 이 때 이전 공간에서 선언했던 이름들에는 접근할 수 없다.
user=&amp;gt; (def x 42) #&amp;#39;user/x user=&amp;gt; x 42 user=&amp;gt; (ns server) nil server=&amp;gt; server=&amp;gt; x Syntax error compiling at (REPL:0:0).</description></item><item><title>소설 연재 플랫폼 개발 일지 003</title><link>http://krapjost.github.io/ko/posts/221025110630-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_003-ko/</link><pubDate>Tue, 25 Oct 2022 11:06:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221025110630-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_003-ko/</guid><description>목표 # 타 연재 플랫폼 웹 클라이언트에서 서버 데이터 어떤 형식으로 가져오는지 확인할 것 그 형식에 맞춰 API 변경하기 lispy 사용해서 repl 연결하기, repl 활용하는 방법들 익숙해지기 garden으로 css 적용하기 i18n 한국어 영어까지 하기, 접속자 ip 위치에 따라 다른 언어 제공하기 과정 # 후기 # 이 날은 기록을 안했다. 반성. 하루 목표를 투두 리스트로 작성한 것은 잘했다. 다시 시도해보자.</description></item><item><title>소설 연재 플랫폼 개발 일지 002</title><link>http://krapjost.github.io/ko/posts/221024121907-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_002-ko/</link><pubDate>Mon, 24 Oct 2022 12:19:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221024121907-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_002-ko/</guid><description>목표 # 연재 플랫폼 기능 정의하기 realworld앱 분석해서 불필요한 부분 제거하기 과정 # 소설 연재 플랫폼 개발 일지 001에서 찾은 리얼월드 앱 서버, 클라이언트가 서로 호환되는 것을 확인하고 로컬에서 돌려보았다. 너무 잘 된다. 다만 polylith와 edn 파일로 클로저 프로젝트를 어떻게 시작하고 repl 연결을 이맥스에서 어떻게 하는건지 잘 모르겠어서 좀 헤멨다. CIDER만으로 하면 잘 되는데 lispy 플러그인으로 연결하니 잘 안된다. e 를 눌렀을 때 jack-in이 아니라 connect로 연결하는 방법은 없을까</description></item><item><title>소설 연재 플랫폼 개발 일지 001</title><link>http://krapjost.github.io/ko/posts/221023135710-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_001-ko/</link><pubDate>Sun, 23 Oct 2022 13:57:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221023135710-%EC%86%8C%EC%84%A4_%EC%97%B0%EC%9E%AC_%ED%94%8C%EB%9E%AB%ED%8F%BC_%EA%B0%9C%EB%B0%9C_%EC%9D%BC%EC%A7%80_001-ko/</guid><description>목표 # shadow-cljs, shadow-grove 사용해서 dummy data 메인 페이지 띄우기. 과정 # shadow-grove는 어떻게 써야하는지 이해가 안된다. 예제 앱에서 모델을 참고하고 있는데 그 모델이 어디에 정의되어 있는지 찾을 수가 없었다. realworld 앱 예제들 중에서 re-frame을 사용한 프로젝트를 발견했다. 서버 또한 클로저로 작성된 것을 찾을 수 있었다. re-frame이 SPA 프레임워크라 둘이 같이 쓰일 수 있을지는 모르겠지만 좋은 레퍼런스를 찾아 기분이 좋다.
결론 # rum을 사용해보고 싶었지만 자유도는 아직 독인 것 같다.</description></item><item><title>Emacs에서 Gmail 사용하기</title><link>http://krapjost.github.io/ko/posts/221020193116-emacs%EC%97%90%EC%84%9C_gmail_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-ko/</link><pubDate>Thu, 20 Oct 2022 19:31:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221020193116-emacs%EC%97%90%EC%84%9C_gmail_%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-ko/</guid><description>목표 # Doom emacs에서 Gmail을 수발신 하기 위해 필요한 설정들과 그 과정에서 배운 것들을 기록하기 위함.
이맥스내에서 필요한 설정 # ~/.doom.d/init.el 파일 # (doom! ;;... :email ;; 이 부분 주석 해제 (mu4e +org +gmail)) mu4e란 # mu for emacs 라는 뜻의 이름인 듯 하다. 위 mu4e 변수 위에 K 키를 누르면 Readme문서를 확인할 수 있다.
mu는 maildir-utils 의 약자이다. maildir 포맷 디렉터리 내의 이메일 메시지들을 다루는 도구 모음이다. 커맨드라인에서 메시지들을 색인, 검색, 추가, 삭제, 확인할 수 있다.</description></item><item><title>코드를 잘 작성하기 위해서는</title><link>http://krapjost.github.io/ko/posts/221018205036-%EC%BD%94%EB%93%9C%EB%A5%BC_%EC%9E%98_%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0_%EC%9C%84%ED%95%B4%EC%84%9C%EB%8A%94-ko/</link><pubDate>Tue, 18 Oct 2022 20:50:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221018205036-%EC%BD%94%EB%93%9C%EB%A5%BC_%EC%9E%98_%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0_%EC%9C%84%ED%95%B4%EC%84%9C%EB%8A%94-ko/</guid><description>내 고민에 대한 고마운 분의 조언 # 이전에 작성한 코드가 읽기 힘들어서 고민이다. # 코드(를 포함한 모든 형식의 글)은 후에 읽어야 할 사람을 생각하며 써야 한다. 경력이 쌓일수록 이런 능력이 생겨야 하고, 생길 것이다. &amp;ldquo;프로그래머의 뇌&amp;quot;라는 책을 읽어보길 권하셨다. 코드를 잘 작성하는 능력보다 코드를 잘 읽는 능력이 상대적으로 과소평가 되어있다. 코드를 잘 읽는 연습을 해보자. 앞으로 어떤 기술 스택을 주로 공부해야 할지 잘 모르겠다. # 앞으로 웹베이스(브라우저와 Js런타임)의 에코 시스템이 더욱 커질 것이라고 생각한다.</description></item><item><title>youtube는 비디오를 어떻게 저장하는가</title><link>http://krapjost.github.io/ko/posts/221018195600-youtube%EB%8A%94_%EB%B9%84%EB%94%94%EC%98%A4%EB%A5%BC_%EC%96%B4%EB%96%BB%EA%B2%8C_%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94%EA%B0%80-ko/</link><pubDate>Tue, 18 Oct 2022 19:56:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221018195600-youtube%EB%8A%94_%EB%B9%84%EB%94%94%EC%98%A4%EB%A5%BC_%EC%96%B4%EB%96%BB%EA%B2%8C_%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94%EA%B0%80-ko/</guid><description>원문
요약 # 서버는 마이크로 서비스로 python, c, c++, java, go로 작성되어 있다. DB는 Vitess 로 돌리는 MySql 사용. Memcache 는 Caching에 사용. Zookeeper 는 node co-ordination. node co-ordination이 뭐지?
데이터 흐름 # Figure 1: 유튜브 아키텍쳐
자주 요청되는 비디오는 CDN server에 두고 별로 인기 없는 비디오는 DB에서 직접 가져온다.
시작점 # 유튜브는 2005년 시작했고 2006년 11월 구글에 인수되었다. 구글에 인수되기 전에는 2명의 시스템 관리자, 2명의 소프트웨어 설계자, 2명의 기능 개발자, 2명의 네트워크 엔지니어, 1명의 DBA 로 구성되어 있었다.</description></item><item><title>스타트업 스쿨 회고</title><link>http://krapjost.github.io/ko/posts/221018174449-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85_%EC%8A%A4%EC%BF%A8_%ED%9A%8C%EA%B3%A0-ko/</link><pubDate>Tue, 18 Oct 2022 17:44:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221018174449-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85_%EC%8A%A4%EC%BF%A8_%ED%9A%8C%EA%B3%A0-ko/</guid><description>멋있는 사람들이 다 모인 곳. # 1년이나 지났지만 그 장소, 그 사람들의 진지하고 열정적인 바이브가 그립다. 다들 스타트업을 하려고 모인 사람들이다 보니 모두 행동력이 좋았다. 나는 굉장히 사교적이지 못한 성격인데 운이 좋게도 좋은 사람들이 다가와줘서 많이 배울 수 있었다. 뭔가 나 자신이 상대적으로 너무 부족한 느낌이 들어 나를 더 크게 포장하곤 했었는데 지금 돌이켜보니 너무 부끄럽다. 겸손하고도 당당할 수 있어야 한다.
배운 점. # 멘탈과 관련해서 # 내가 느낀 것은 아이디어 자체는 정작 크게 중요하지 않다는 것이었다.</description></item><item><title>42서울 피신 회고</title><link>http://krapjost.github.io/ko/posts/221018165518-42%EC%84%9C%EC%9A%B8_%ED%94%BC%EC%8B%A0_%ED%9A%8C%EA%B3%A0-ko/</link><pubDate>Tue, 18 Oct 2022 16:55:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221018165518-42%EC%84%9C%EC%9A%B8_%ED%94%BC%EC%8B%A0_%ED%9A%8C%EA%B3%A0-ko/</guid><description>C가 왜 중요한지 느낄 수 있었다. # 자바스크립트로 처음 코드를 배웠기 때문에 동적이고, 유연한 프로토타입 기반의 언어를 기준으로 프로그램을 생각하고 있었다. 그냥 코드를 작성하면 언어가, 컴파일러가 알아서 다 해주니까, 따로 신경써본 적이 없었고, 그러다보니 그 블랙박스 내의 동작은 내가 상상해볼 수 없는 영역이었다.
&amp;ldquo;잘 작성되었고, 빠르고 인기가 많은&amp;rdquo; 라이브러리들을 찾아 거기서 제공해주는 API를 매뉴얼대로 작성하는 것이 전부였다. 뭔가 부족하다고 생각이 들었고 이대로 괜찮을지에 대한 불안감은 늘 있었지만 정작 나 스스로 블랙박스를 열어볼 용기와 인내는 없었던 것 같다.</description></item><item><title>pandoc으로 md파일 pdf로 변환하기</title><link>http://krapjost.github.io/ko/posts/221018160725-pandoc%EC%9C%BC%EB%A1%9C_md%ED%8C%8C%EC%9D%BC_pdf%EB%A1%9C_%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0-ko/</link><pubDate>Tue, 18 Oct 2022 16:07:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221018160725-pandoc%EC%9C%BC%EB%A1%9C_md%ED%8C%8C%EC%9D%BC_pdf%EB%A1%9C_%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0-ko/</guid><description>패키지 매니저로 pandoc, wkhtmltopdf 를 설치한다.
yay pandoc yay wkhtmltopdf css 파일을 같은 디렉터리에 위치시킨다.
wget https://gist.githubusercontent.com/dashed/6714393/raw/ae966d9d0806eb1e24462d88082a0264438adc50/github-pandoc.css css를 적용한 html문서를 만들고, pdf로 출력한다.
pandoc -t html5 --metadata pagetitle=&amp;#34;resume.md&amp;#34; --css=github-pandoc.css resume.md -o res.pdf 상세한 설명은 스택 오버플로우에&amp;hellip;</description></item><item><title>스택 (Stack)</title><link>http://krapjost.github.io/ko/posts/221018112544-%EC%8A%A4%ED%83%9D_stack-ko/</link><pubDate>Tue, 18 Oct 2022 11:25:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221018112544-%EC%8A%A4%ED%83%9D_stack-ko/</guid><description>스택은 자료를 쌓아올리는 방식으로 저장한다. 책을 쌓아둔 것과 같다. 5권의 책을 쌓아뒀을 때, 첫 번째 책을 꺼내보려면 그 책 위의 네 권을 먼저 들어올려야 한다. 이러한 특징을 FILO(First In Last Out), LIFO(Last In First Out). 처음 들어온 게 마지막에 나간다고 줄여 말한다.
스택은 추상적 자료 구조이고, 이를 구체적으로 어떻게 구현할지는 구현자 마음대로이다.</description></item><item><title>추상적 자료 구조</title><link>http://krapjost.github.io/ko/posts/221017200019-%EC%B6%94%EC%83%81%EC%A0%81_%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0-ko/</link><pubDate>Mon, 17 Oct 2022 20:00:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017200019-%EC%B6%94%EC%83%81%EC%A0%81_%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0-ko/</guid><description>추상 자료형이 말 그대로 자료의 형식만을 정의하는 가장 높은 단계의 추상화라면,
추상적 자료구조는 해당 자료형을 구체적으로 구현하기 위한 조건들도 함께 정의한다.
&amp;ldquo;스택(stack)이라는 자료형(data type)의 입출력을 위한 방법에는 push와 pop이 있고, 이 연산들은 O(1)만에 이뤄져야 한다.&amp;quot;
고 정의된 것이 있다면 이것을 추상적 자료구조라고 말하며, 이를 구현한 것을 구체적 자료구조라고 말한다.
이렇게 위키피디아 한글 문서에서는 설명하고 있으나 영문판에서는 &amp;lsquo;추상 자료구조&amp;rsquo;와 &amp;lsquo;추상 자료형&amp;rsquo;의 정의 간에 특별한 구분을 두고 있지는 않는 것 같다. 추상 자료형과 자료구조의 차이 정도만 인식하고 있으면 될 것 같다.</description></item><item><title>추상 자료형</title><link>http://krapjost.github.io/ko/posts/221017194720-%EC%B6%94%EC%83%81_%EC%9E%90%EB%A3%8C%ED%98%95-ko/</link><pubDate>Mon, 17 Oct 2022 19:47:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017194720-%EC%B6%94%EC%83%81_%EC%9E%90%EB%A3%8C%ED%98%95-ko/</guid><description>추상 자료형이란 # 추상 자료형은(Abstract Data Type, ADT)는 자료의 형태와 그와 관계된 연산을 수학적으로만 정의한 것이다. 해당 자료형이 내부적으로 어떤 방식으로 구현되는지는 관심이 없다. &amp;lsquo;형&amp;rsquo;과 &amp;lsquo;Type&amp;rsquo;, &amp;lsquo;자료&amp;rsquo;와 &amp;lsquo;Data&amp;rsquo;가 동일한 뜻인 것을 가끔 인지하지 못할 때가 있다.
정수는 추상 자료형(ADT)이다. &amp;hellip;, -2, -1, 0, 1, 2, &amp;hellip;의 값으로 정의되며, 연산은 더하기, 빼기, 곱하기, 나누기가 가능하고, 대소 비교 등도 가능하다.
추상적 자료형은 구현 방법을 명시하고 있지 않다는 점에서 자료 구조와 다르다. 비슷한 개념의 추상적 자료 구조는 각 연산의 시간 복잡도를 명기하고 있지만 추상적 자료형에서는 이것조차 명기하지 않는다.</description></item><item><title>배열 (Array)</title><link>http://krapjost.github.io/ko/posts/221017180001-array-ko/</link><pubDate>Mon, 17 Oct 2022 18:00:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017180001-array-ko/</guid><description>배열은 연속적인 자료의 나열이다. 배열 내에는 동일한 형(type)의 자료가 나열되어야 한다. 보통의 프로그래밍 언어에서 인덱스는 0부터 시작한다. 루아는 특이하게 1부터 시작한다.
C에서는 선언 시에 배열로 사용될 메모리 주소의 범위를 정적으로 할당한다. 반면 Javascript에서의 배열은 동적으로 할당되며, 메모리 주소의 연속일 뿐인 C와 다르게 다양한 메서드를 포함하고 있는 객체로 구현되어 있다. 내부 작동은 브라우저의 엔진마다 다를 수 있다고 한다.
const arr = [1, 2, 3]; arr[1]; &amp;gt; 2 arr[&amp;#34;1&amp;#34;]; &amp;gt; 2 인덱스는 특이하게 &amp;ldquo;1&amp;quot;로도 1로도 접근 가능한데 내부적으로 toString() 메소드를 호출하기 때문이라고 한다.</description></item><item><title>자료구조</title><link>http://krapjost.github.io/ko/posts/221017175656-data_structure-ko/</link><pubDate>Mon, 17 Oct 2022 17:56:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221017175656-data_structure-ko/</guid><description>자료구조란 추상 자료형을 구현한 것. 자료(데이터)의 모임, 자료간의 관계, 자료의 입출력 방식.
왜 자료구조를 알아야 할까 # 주어진 문제를 해결할 때 자료구조를 선택하고 나면 어떤 알고리즘을 사용할지 명확해진다. 구현의 난이도, 결과물의 성능이 자료구조에 크게 의존한다.
자료구조의 5가지 필수 구성 요소 # 참조 링크
어떻게 접근 할 것인가. 어떻게 입력 할 것인가. 어떻게 삭제 할 것인가. 어떻게 탐색 할 것인가. 어떻게 정렬 할 것인가. 자료구조 선택 방법 # 자료구조의 분류 # 자료구조는 추상적인 구조인지, 자료간의 관계가 선형(1:1)적인지 비선형적인지 등으로 분류 되어진다.</description></item><item><title>이력서</title><link>http://krapjost.github.io/ko/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://krapjost.github.io/ko/resume/</guid><description>이력서 # pdf 버전
박기둥 # 그림 그리길 좋아하다 무언가 작동하는 것을 만드는 것을 좋아하게 되었습니다.
재밌고 새로운 것을 만들어 보고 싶다는 생각으로 프로그래밍을 시작했습니다.
목적을 이루기 위함보다 그 과정이 즐거워서 작업을 하는 사람이 되고자 합니다.
개인정보 # 연락처 : 이메일 공부 기록 : 블로그 코드 저장소 : 깃허브 경험 # 직무 # 기간 회사 담당 개발 스택 2021 01 - 08 나무소프트 프론트엔드 개발 Js/React, Go + Docker + AWS 나무소프트에서의 경험</description></item></channel></rss>