<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>clojure on 정원</title><link>http://krapjost.github.io/ko/categories/clojure/</link><description>Recent content in clojure on 정원</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 23 Nov 2022 14:28:00 +0900</lastBuildDate><atom:link href="http://krapjost.github.io/ko/categories/clojure/index.xml" rel="self" type="application/rss+xml"/><item><title>221123142843 Cognitect_dev_tools_설정 Ko cognitect dev-tools 설정</title><link>http://krapjost.github.io/ko/posts/221123142843-cognitect_dev_tools_%EC%84%A4%EC%A0%95-ko/</link><pubDate>Wed, 23 Nov 2022 14:28:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221123142843-cognitect_dev_tools_%EC%84%A4%EC%A0%95-ko/</guid><description>datomic을 로컬에서 테스트 해보려면 com.datomic:dev-local 라이브러리가 필요한데 이는 공개 저장소에서 받을 수 없다. dev-tools 링크에서 이메일 입력하면 다운로드 링크를 보내준다.
maven으로 설치할 수도 있다. maven 설정에 서버를 설정해준다. 발급된 개인 비밀번호와 계정을 입력한다.
&amp;lt;!-- in ~/.m2/settings.xml --&amp;gt; &amp;lt;settings&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;cognitect-dev-tools&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt;krapjost@gmail.com&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;PASSWORD&amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; 프로젝트를 deps.edn으로 관리할 경우 다음 전역 설정을 해주면 된다.
;; in ~/.clojure/deps.edn {:mvn/repos {&amp;#34;cognitect-dev-tools&amp;#34; {:url &amp;#34;https://dev-tools.cognitect.com/maven/releases/&amp;#34;}}} Leiningen은 프로젝트별로 설정해주어야 하는데 나는 안 쓸 것이기 때문에 넘어가기로&amp;hellip;</description></item><item><title>fulcro 개발자 가이드</title><link>http://krapjost.github.io/ko/posts/221123113417-fulcro_development_guide-ko/</link><pubDate>Wed, 23 Nov 2022 11:34:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221123113417-fulcro_development_guide-ko/</guid><description>원문 개인적인 학습을 위해 번역합니다. 건너뛰면서 번역할 수 있습니다.
1. About this book # fulcro3를 위한 개발자 가이드입니다. 초보자와 경험 많은 개발자들에게 이 라이브러리의 세부적인 내용들을 안내하기 위해 쓰여졌습니다. fulcro 관련 자료는 웹 상에 많이 있어 당신의 학습 스타일에 맞춰 배울 수 있습니다.
Clojure docs Youtube videos Fulcro community 1.1. Common Prefixes and Namespaces # (ns your-ns (:require [com.fulcrologic.fulcro.components :as comp :refer [defsc]] [com.fulcrologic.fulcro.application :as app] [com.fulcrologic.fulcro.data-fetch :as df] [com.</description></item><item><title>shadow-grove-</title><link>http://krapjost.github.io/ko/posts/221109170247-shadow_grove-ko/</link><pubDate>Wed, 09 Nov 2022 17:02:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221109170247-shadow_grove-ko/</guid><description>컴포넌트 리스트 그리는 방법 # 아래와 같은 데이터와
(def book-list {:section &amp;#34;Today&amp;#34; :list [{:id &amp;#34;0&amp;#34; :name &amp;#34;book1&amp;#34; :author &amp;#34;doong&amp;#34; :description &amp;#34;rorlame edalkwdqd qwlmdkwmd ql&amp;#34;} {:id &amp;#34;1&amp;#34; :name &amp;#34;book2&amp;#34; :author &amp;#34;ojo&amp;#34; :description &amp;#34;heleld qwdmlkqwd awlkda wk&amp;#34;}]} {:section &amp;#34;Weekly&amp;#34; :list [{:id &amp;#34;4&amp;#34; :name &amp;#34;book5&amp;#34; :author &amp;#34;asdw&amp;#34; :description &amp;#34;asdawd&amp;#34;} {:id &amp;#34;6&amp;#34; :name &amp;#34;book7&amp;#34; :author &amp;#34;qw w w&amp;#34; :description &amp;#34;wqlwd qwldkm qwlkdasd asd&amp;#34;}]}) 아래와 같은 컴포넌트가 있을 때
(defc book-card [{:keys [name author description]}] (render (&amp;lt;&amp;lt; [:a {:class (css :relative :block :h-96)} [:span {:class (css :absolute :inset-0 :border-2 :border-dashed :border-black)}] [:div {:class (css :relative :flex :h-full :items-end :border-2 :border-black :bg-white :transition-transform [:hover {:transform &amp;#34;translate(-0.</description></item><item><title>clj-kondo</title><link>http://krapjost.github.io/ko/posts/221101035735-clj_kondo-ko/</link><pubDate>Tue, 01 Nov 2022 03:57:00 +0900</pubDate><guid>http://krapjost.github.io/ko/posts/221101035735-clj_kondo-ko/</guid><description>clj-kondo는 # 클로저를 위한 정적 코드 분석도구이다. clojure-lsp에서 내부적으로 사용하고 있다.
문제 # 소설 연재 플랫폼 개발 일지 005에서 잘 작동하는 코드에 lsp가 unresolved symbol 에러를 띄우는 문제가 있었다.
해결 시도 1 # 처음에는 클래스패스를 읽지 못해서 그런가 싶어서 프로젝트 .lsp 디렉터리에 다음 설정을 해보았다.
{:project-specs [{:project-path &amp;#34;shadow-cljs.edn&amp;#34; :classpath-cmd [&amp;#34;shadow-cljs&amp;#34; &amp;#34;classpath&amp;#34;]}]} shadow-cljs.edn이 있는 곳이 프로젝트 루트이고, 클래스패스는 다음 명령으로 읽어라하고 지정했다. 하지만 clojure-lsp는 기본적으로 shadow-cljs.edn 파일이 발견되면 npx shadow-cljs classpath 명령으로 클래스패스를 읽는다고 한다.</description></item></channel></rss>